// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gt_buyu.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GtMsg {

  /// <summary>Holder for reflection information generated from gt_buyu.proto</summary>
  public static partial class GtBuyuReflection {

    #region Descriptor
    /// <summary>File descriptor for gt_buyu.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GtBuyuReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1ndF9idXl1LnByb3RvEgZndF9tc2ciHAoEVmVjMhIJCgF4GAEgASgCEgkK",
            "AXkYAiABKAIiJwoEVmVjMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAiI+Cg5Db2xsaWRlckNpcmNsZRIcCgZPZmZzZXQYASABKAsyDC5ndF9t",
            "c2cuVmVjMxIOCgZSYWRpdXMYAiABKAIiMwoFUXVhdGUSCQoBeBgBIAEoAhIJ",
            "CgF5GAIgASgCEgkKAXoYAyABKAISCQoBdxgEIAEoAiIuCg9QYXRoUG9pbnRD",
            "bGllbnQSGwoFcG9pbnQYASABKAsyDC5ndF9tc2cuVmVjMyLuAQoQU2luZ2xl",
            "UGF0aENsaWVudBIQCghwYXRoTmFtZRgBIAEoCRIuCg1wYXRoUG9pbnRMaXN0",
            "GAIgAygLMhcuZ3RfbXNnLlBhdGhQb2ludENsaWVudBIjCgdhY3Rpb25zGAMg",
            "AygLMhIuZ3RfbXNnLkFjdGlvbkRhdGESFAoMY29weVBhdGhOYW1lGAQgASgJ",
            "EhwKBm9mZnNldBgFIAEoCzIMLmd0X21zZy5WZWMzEg0KBWZvbGRYGAYgASgI",
            "Eg0KBWZvbGRZGAcgASgIEg0KBWZvbGRaGAggASgIEhIKCnNwZWVkU2NhbGUY",
            "CSABKAIiPQoPUGF0aEdyb3VwQ2xpZW50EioKCHBhdGhMaXN0GAEgAygLMhgu",
            "Z3RfbXNnLlNpbmdsZVBhdGhDbGllbnQiOAoKQWN0aW9uRGF0YRITCgthY3Rp",
            "b25GcmFtZRgBIAEoBRIVCg1wbGF5SWRsZUluZGV4GAIgASgFIpcBCg9QYXRo",
            "UG9pbnRTZXJ2ZXISGwoFcG9pbnQYASABKAsyDC5ndF9tc2cuVmVjMxIhCgtu",
            "b3JtYWxpemVkWBgCIAEoCzIMLmd0X21zZy5WZWMzEiEKC25vcm1hbGl6ZWRZ",
            "GAMgASgLMgwuZ3RfbXNnLlZlYzMSIQoLbm9ybWFsaXplZFoYBCABKAsyDC5n",
            "dF9tc2cuVmVjMyLuAQoQU2luZ2xlUGF0aFNlcnZlchIQCghwYXRoTmFtZRgB",
            "IAEoCRIuCg1wYXRoUG9pbnRMaXN0GAIgAygLMhcuZ3RfbXNnLlBhdGhQb2lu",
            "dFNlcnZlchIjCgdhY3Rpb25zGAMgAygLMhIuZ3RfbXNnLkFjdGlvbkRhdGES",
            "FAoMY29weVBhdGhOYW1lGAQgASgJEhwKBm9mZnNldBgFIAEoCzIMLmd0X21z",
            "Zy5WZWMzEg0KBWZvbGRYGAYgASgIEg0KBWZvbGRZGAcgASgIEg0KBWZvbGRa",
            "GAggASgIEhIKCnNwZWVkU2NhbGUYCSABKAIiPQoPUGF0aEdyb3VwU2VydmVy",
            "EioKCHBhdGhMaXN0GAEgAygLMhguZ3RfbXNnLlNpbmdsZVBhdGhTZXJ2ZXIi",
            "MwoMQUlCdWxsZXRQYXRoEiMKDXBhdGhQb2ludExpc3QYAiADKAsyDC5ndF9t",
            "c2cuVmVjMiI7ChFBSUJ1bGxldFBhdGhHcm91cBImCghwYXRoTGlzdBgCIAMo",
            "CzIULmd0X21zZy5BSUJ1bGxldFBhdGgiQAoQQUlCdWxsZXRQYXRoU2V0cxIs",
            "Cglncm91cExpc3QYASADKAsyGS5ndF9tc2cuQUlCdWxsZXRQYXRoR3JvdXAi",
            "RwoMUGF0aEZpbGVIZWFkEg0KBWNvdW50GAEgASgFEigKC3BhdGhQb3NJbmZv",
            "GAIgAygLMhMuZ3RfbXNnLlBhdGhQb3NJbmZvIkEKC1BhdGhQb3NJbmZvEhAK",
            "CHBhdGhOYW1lGAEgASgJEhAKCHN0YXJ0UG9zGAIgASgFEg4KBmxlbmd0aBgD",
            "IAEoBSIyCgxNZXNzYWdlVGltZXISEQoJcGFzc0ZyYW1lGAEgASgFEg8KB21l",
            "c3NhZ2UYAiABKAki1QMKElByb2R1Y3RJdGVtQ29udGVudBIYChBQcm9kdWN0",
            "SXRlbUluZGV4GAEgAygFEg0KBWZyYW1lGAIgASgFEhAKCGZpc2hUeXBlGAMg",
            "ASgJEhQKDENvbWJpbmVQYXRocxgEIAEoCBIiCgVpdGVtcxgFIAMoCzITLmd0",
            "X21zZy5Qcm9kdWN0SXRlbRIUCgxlbnRlck1lc3NhZ2UYBiABKAkSFAoMbGVh",
            "dmVNZXNzYWdlGAcgASgJEg8KB29ubHlPbmUYCCABKAgSFQoNd2FpdFVudGls",
            "RG9uZRgJIAEoCBIVCg1mYXN0ZW5PbGRGaXNoGAogASgIEhAKCGZhc3Rlbklu",
            "GAsgASgIEg4KBnRvd2FyZBgMIAEoBRIcCgZvZmZzZXQYDSABKAsyDC5ndF9t",
            "c2cuVmVjMxINCgVmb2xkWBgOIAEoCBINCgVmb2xkWRgPIAEoCBINCgVmb2xk",
            "WhgQIAEoCBISCgpzcGVlZFNjYWxlGBEgASgCEgwKBGRlZXAYEiABKAUSKQoL",
            "bWVzc2FnZUxpc3QYEyADKAsyFC5ndF9tc2cuTWVzc2FnZVRpbWVyEhAKCGlz",
            "WXVaaGVuGBQgASgIEhMKC3Jvb3RNZXNzYWdlGBUgASgJInIKC1Byb2R1Y3RJ",
            "dGVtEhMKC0NvbnRlbnROYW1lGAEgASgJEg4KBmlzU3luYxgCIAEoCBIMCgR0",
            "aW1lGAMgASgFEjAKDGNvbnRlbnRJdGVtcxgEIAMoCzIaLmd0X21zZy5Qcm9k",
            "dWN0SXRlbUNvbnRlbnQieQoQUHJvZHVjdEl0ZW1Hcm91cBIlCghpdGVtTGlz",
            "dBgBIAMoCzITLmd0X21zZy5Qcm9kdWN0SXRlbRIRCgltYWluRW50ZXIYAiAB",
            "KAkSFAoMQWRkRmlzaEVudGVyGAMgASgJEhUKDUVuYWJsZUFkZEZpc2gYBCAB",
            "KAgiiQEKD0Zpc2hQcm9kdWN0Tm9kZRITCgtwcm9kdWN0TmFtZRgBIAEoCRIS",
            "CgpyZXBlYXRUaW1lGAIgASgFEhAKCGZpc2hUeXBlGAMgASgJEhIKCnN0YXJ0",
            "RnJhbWUYBCABKAUSJwoGY2hpbGRzGAUgAygLMhcuZ3RfbXNnLkZpc2hQcm9k",
            "dWN0Tm9kZSI4CgpGaXNoQ29uZmlnEgwKBHR5cGUYASABKAUSDAoEbmFtZRgC",
            "IAEoCRIOCgZyYWR1aXMYAyABKAIiOQoORmlzaENvbmZpZ0xpc3QSJwoLZmlz",
            "aENvbmZpZ3MYASADKAsyEi5ndF9tc2cuRmlzaENvbmZpZyKlAQoIRmlzaERh",
            "dGESEAoIZmlzaE5hbWUYASABKAkSFgoOZmlzaEltcG9ydGFuY2UYAiABKAUS",
            "EQoJZmlzaE1vZGVsGAMgASgJEhEKCUZpc2hTY29yZRgEIAMoBRIVCg1maXNo",
            "RGllRWZmZWN0GAUgAygJEjIKEmZpc2hBY3Rpb25EYXRhTGlzdBgGIAMoCzIW",
            "Lmd0X21zZy5GaXNoQWN0aW9uRGF0YSJJCg5GaXNoQWN0aW9uRGF0YRISCgpB",
            "Y3Rpb25OYW1lGAEgASgJEhMKC0FjdGlvbkZyYW1lGAIgASgFEg4KBklzSWRs",
            "ZRgDIAEoCCJaCgxGaXNoQ29sbGlkZXISEAoIZmlzaE5hbWUYASABKAkSDQoF",
            "ekJhc2UYAiABKAUSKQoJY29sbGlkZXJzGAMgAygLMhYuZ3RfbXNnLkNvbGxp",
            "ZGVyQ2lyY2xlIj8KEUZpc2hDb2xsaWRlckdyb3VwEioKDGNvbGxpZGVyTGlz",
            "dBgBIAMoCzIULmd0X21zZy5GaXNoQ29sbGlkZXIiiAEKCkJ1bGxldERhdGES",
            "EAoIY29uZmlnSUQYASABKAUSDQoFbW9kZWwYAiABKAkSDQoFc3BlZWQYAyAB",
            "KAUSDgoGcmFkaXVzGAQgASgCEhMKC3l1d2FuZ01vZGVsGAUgASgJEhMKC3R1",
            "cnJldE1vZGVsGAYgASgJEhAKCG11bHRpcGxlGAcgASgFIj4KCU1hZ2ljRGF0",
            "YRIQCghjb25maWdJRBgBIAEoBRINCgVtb2RlbBgCIAEoCRIQCghtdWx0aXBs",
            "ZRgHIAEoBSIrCghQcm9wRGF0YRIQCghjb25maWdJRBgBIAEoBRINCgVwcmlj",
            "ZRgHIAEoBSLoAQoMQnVsbGV0RXh0ZXJuEhAKCFR1cnJldElEGAEgASgFEhMK",
            "C1R1cnJldE1vZGVsGAIgASgJEhAKCENvbmZpZ0lEGAMgASgFEhMKC0J1bGxl",
            "dE1vZGVsGAQgASgJEhAKCE5ldE1vZGVsGAUgASgJEhAKCE11bHRpcGxlGAYg",
            "ASgFEg0KBVNwZWVkGAcgASgFEg4KBlJhZGl1cxgIIAEoAhISCgpTb3VuZElu",
            "ZGV4GAkgASgFEg4KBlBhb2tvdRgKIAEoCRISCgpTa2lsbE1vZGVsGAsgASgJ",
            "Eg8KB1NraWxsYmcYDCABKAkiOAoMQnVsbGV0Q29uZmlnEigKCmJ1bGxldExp",
            "c3QYASADKAsyFC5ndF9tc2cuQnVsbGV0RXh0ZXJuInEKC0luc3RhbnREYXRh",
            "EhAKCGNvbmZpZ0lEGAEgASgFEhAKCG11bHRpcGxlGAIgASgFEg0KBXNwZWVk",
            "GAMgASgFEg0KBW1vZGVsGAQgASgJEg4KBmVmZmVjdBgFIAEoCRIQCghkaXNj",
            "cmliZRgGIAEoCSItCgpGcmVlemVEYXRhEg0KBWZyYW1lGAEgASgFEhAKCGR1",
            "cmF0aW9uGAIgASgFIjoKCEZhc3REYXRhEg0KBWZyYW1lGAEgASgFEg0KBXNw",
            "ZWVkGAIgASgCEhAKCER1cmF0aW9uGAMgASgFIkgKFUpvaW5GcmVlUmVxdWVz",
            "dGZpc2gzZBIOCgZ1c2VySWQYASABKAkSDwoHdGFibGVJZBgCIAEoBRIOCgZz",
            "ZWF0SWQYAyABKAUiUwoWSm9pbkZyZWVSZXNwb25zZWZpc2gzZBIQCghub3dG",
            "cmFtZRgBIAEoBRITCgtyb290TWVzc2FnZRgCIAMoCRISCgpTY29yZVJhdGlv",
            "GAMgASgFIpkBCgpHYW1lQ29uZmlnEhwKBmd1blBvcxgBIAMoCzIMLmd0X21z",
            "Zy5WZWMyEh8KCXR1cnJldFBvcxgCIAMoCzIMLmd0X21zZy5WZWMyEiUKC2Zp",
            "c2hDb25maWdzGAMgAygLMhAuZ3RfbXNnLkZpc2hEYXRhEiUKC3Byb3BDb25m",
            "aWdzGAYgAygLMhAuZ3RfbXNnLlByb3BEYXRhIh0KDEN1cnJlbnRGcmFtZRIN",
            "CgVmcmFtZRgBIAEoAiIsCghGaXNoQ29pbhIOCgZzZWF0SWQYASABKAUSEAoI",
            "c2NvcmVOb3cYAiABKAMidwoKU2NlbmVGaXNocxIkCgVmaXNocxgBIAEoCzIV",
            "Lmd0X21zZy5Fc3RhYmxpc2hGaXNoEiIKBmZyZWV6ZRgCIAMoCzISLmd0X21z",
            "Zy5GcmVlemVEYXRhEh8KBWZhc3RzGAMgAygLMhAuZ3RfbXNnLkZhc3REYXRh",
            "Io4BChVFc3RhYmxpc2hGaXNoRXh0ZXJuYWwSIwoEZmlzaBgBIAEoCzIVLmd0",
            "X21zZy5Fc3RhYmxpc2hGaXNoEg8KB09ubHlPbmUYAiABKAgSFQoNV2FpdFVu",
            "dGlsRG9uZRgDIAEoCBITCgtSb290TWVzc2FnZRgEIAEoCRITCgtSZWRCYWdT",
            "Y29yZRgFIAEoBSKLAwoNRXN0YWJsaXNoRmlzaBIOCgZmaXNoSWQYASABKAUS",
            "EAoIZmlzaFR5cGUYAiABKAUSEAoIcGF0aE5hbWUYAyADKAkSDQoFZnJhbWUY",
            "BCABKAUSDAoEZGVlcBgFIAEoBRIRCglpc1JlZEZpc2gYBiABKAgSEQoJcmFu",
            "ZG9tTnVtGAcgASgFEhUKDUZhc3Rlbk9sZEZpc2gYCCABKAgSEAoIZmFzdGVu",
            "SW4YCSABKAgSDgoGdG93YXJkGAogASgFEhwKBm9mZnNldBgLIAEoCzIMLmd0",
            "X21zZy5WZWMzEg0KBWZvbGRYGAwgASgIEg0KBWZvbGRZGA0gASgIEg0KBWZv",
            "bGRaGA4gASgIEhIKCnNwZWVkU2NhbGUYDyABKAISFAoMRW50ZXJNZXNzYWdl",
            "GBAgASgJEhQKDExlYXZlTWVzc2FnZRgRIAEoCRIpCgttZXNzYWdlTGlzdBgS",
            "IAMoCzIULmd0X21zZy5NZXNzYWdlVGltZXISFAoMaXNSZWRCYWdGaXNoGBMg",
            "ASgIIrQBCglDYXRjaEZpc2gSDgoGc2VhdElkGAEgASgFEg4KBmZpc2hJZBgC",
            "IAEoBRINCgVmcmFtZRgDIAEoBRISCgpmaXNoX3Njb3JlGAQgASgDEhQKDGxp",
            "bmtfZmlzaF9pZBgFIAEoBRIQCghzY29yZU5vdxgGIAEoAxIPCgdkaWVUeXBl",
            "GAcgASgFEhMKC3JlZEJhZ1Njb3JlGAggASgFEhYKDnJlZEJhZ1Njb3JlQWxs",
            "GAkgASgFIp8BChZFc3RhYmxpc2hCdWxsZXRSZXF1ZXN0Eg0KBWZyYW1lGAEg",
            "ASgFEhIKCmxvY2tGaXNoSWQYAiABKAUSHgoIdGVybWluYWwYAyABKAsyDC5n",
            "dF9tc2cuVmVjMhISCgpidWxsZXRUeXBlGAQgASgFEhYKDmJ1bGxldFR1cnJl",
            "dElEGAUgASgFEhYKDmJ1bGxldENvbmZpZ0lEGAYgASgFIsYBCgxDcmVhdGVC",
            "dWxsZXQSDgoGc2VhdElkGAEgASgFEg0KBXNwZWVkGAIgASgFEg0KBWZyYW1l",
            "GAMgASgFEh4KCHRlcm1pbmFsGAQgASgLMgwuZ3RfbXNnLlZlYzISEgoKbG9j",
            "a0Zpc2hJZBgFIAEoBRISCgpidWxsZXRUeXBlGAYgASgFEhAKCHNjb3JlTm93",
            "GAcgASgDEhYKDmJ1bGxldFR1cnJldElEGAggASgFEhYKDmJ1bGxldENvbmZp",
            "Z0lEGAkgASgFIlMKCkZyZWV6ZUZpc2gSDQoFZnJhbWUYASABKAUSEAoIZHVy",
            "YXRpb24YAiABKAUSEAoIZmlzaExpc3QYAyADKAUSEgoKc2hvd0VmZmVjdBgE",
            "IAEoCCJiCgpGYXN0RXNjYXBlEg0KBWZyYW1lGAEgASgFEg0KBXNwZWVkGAIg",
            "ASgCEhAKCGR1cmF0aW9uGAMgASgFEhAKCGZpc2hMaXN0GAQgAygFEhIKCnNo",
            "b3dFZmZlY3QYBSABKAgiIAoQRmlzaEFwcGVhck5vdGlmeRIMCgRuYW1lGAEg",
            "ASgJIk4KEUNhc3RTa2lsbFJlc3BvbnNlEhUKDXNraWxsQ29uZmlnSUQYASAB",
            "KAUSDgoGc2VhdElkGAIgASgFEhIKCnJlc3VsdENvZGUYAyABKAUiXQoPVXNl",
            "UHJvcFJlc3BvbnNlEhQKDHByb3BDb25maWdJRBgBIAEoBRIOCgZzZWF0SWQY",
            "AiABKAUSEgoKcmVzdWx0Q29kZRgDIAEoBRIQCghkaXNjcmliZRgEIAEoCSI2",
            "ChBOb3dBbmdlclJlc3BvbnNlEhIKCmFuZ2VyVmFsdWUYASABKAUSDgoGc2Vh",
            "dElkGAIgASgFIj8KDUJ1bGxldFNwZWVkVXASDQoFZnJhbWUYASABKAUSEAoI",
            "ZHVyYXRpb24YAiABKAUSDQoFc2NhbGUYAyABKAIiLQoVQ2hhbmdlQmF0dGVy",
            "eUJ5TXlzZWxmEhQKDGJhdHRlcnlJbmRleBgCIAEoBSI8ChRDaGFuZ2VCYXR0",
            "ZXJ5QnlPaHRlchIOCgZzZWF0SWQYASABKAUSFAoMYmF0dGVyeUluZGV4GAIg",
            "ASgFIh0KG0ZvcmNlRXhpdFRhYmxlUmVxdWVzdGZpc2gzZCIyChxGb3JjZUV4",
            "aXRUYWJsZVJlc3BvbnNlZmlzaDNkEhIKCnJlc3VsdENvZGUYASABKAUiRgoP",
            "TmV3VGFza1Jlc3BvbnNlEg4KBnRhc2tJZBgBIAEoBRIQCghmaXNoVHlwZRgC",
            "IAEoBRIRCglmaXNoQ291bnQYAyABKAUiOQoUVGFza1Byb2dyZXNzUmVzcG9u",
            "c2USDgoGdGFza0lkGAEgASgFEhEKCWZpc2hDb3VudBgCIAEoBSI2ChJUYXNr",
            "RmluaXNoUmVzcG9uc2USDgoGdGFza0lkGAEgASgFEhAKCGdldFNjb3JlGAIg",
            "ASgDIiIKEVRha2VSZWRCYWdSZXF1ZXN0Eg0KBVNjb3JlGAEgASgFIk8KElRh",
            "a2VSZWRCYWdSZXNwb25zZRISCgpyZXN1bHRDb2RlGAEgASgFEhUKDXJlc3Vs",
            "dE1lc3NhZ2UYAiABKAkSDgoGVGlja2V0GAMgASgJIiMKDFVwZGF0ZVJlZEJh",
            "ZxITCgtSZWRCYWdTY29yZRgBIAEoBSI3ChRVc2VyVGFrZVNjb3JlUmVxdWVz",
            "dBINCgVTY29yZRgBIAEoAxIQCghQYXNzV29yZBgCIAEoCSIqChRVc2VyVGFr",
            "ZVNjb3JlUmVzcG9uZRISCgpyZXN1bHRDb2RlGAEgASgFIjgKE0Zpc2hJbmZv",
            "cm1hdGlvblRvQUkSDQoFRnJhbWUYASABKAUSEgoKQXJlYXNTY29yZRgCIAMo",
            "BSIfCg1SZWRGaXNoQXBwZWFyEg4KBmZpc2hJZBgBIAEoBSIiChBSZWRGaXNo",
            "RGlzYXBwZWFyEg4KBmZpc2hJZBgBIAEoBSIxCg1CaWdGaXNoQXBwZWFyEg4K",
            "BmZpc2hJZBgBIAEoBRIQCghmaXNoVHlwZRgCIAEoBSIiChBCaWdGaXNoRGlz",
            "YXBwZWFyEg4KBmZpc2hJZBgBIAEoBSINCgtBSUhlYXJ0QmVhdCJMCghGaXNo",
            "VGVzdBIOCgZmaXNoSWQYASABKAUSEAoIZmlzaFR5cGUYAiABKAUSHgoIcG9z",
            "aXRpb24YAyABKAsyDC5ndF9tc2cuVmVjMiJCCg1GaXNoR3JvdXBUZXN0EhAK",
            "CGZyYW1lTm93GAEgASgFEh8KBWdyb3VwGAIgAygLMhAuZ3RfbXNnLkZpc2hU",
            "ZXN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.Vec2), global::GtMsg.Vec2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.Vec3), global::GtMsg.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ColliderCircle), global::GtMsg.ColliderCircle.Parser, new[]{ "Offset", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.Quate), global::GtMsg.Quate.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathPointClient), global::GtMsg.PathPointClient.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.SinglePathClient), global::GtMsg.SinglePathClient.Parser, new[]{ "PathName", "PathPointList", "Actions", "CopyPathName", "Offset", "FoldX", "FoldY", "FoldZ", "SpeedScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathGroupClient), global::GtMsg.PathGroupClient.Parser, new[]{ "PathList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ActionData), global::GtMsg.ActionData.Parser, new[]{ "ActionFrame", "PlayIdleIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathPointServer), global::GtMsg.PathPointServer.Parser, new[]{ "Point", "NormalizedX", "NormalizedY", "NormalizedZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.SinglePathServer), global::GtMsg.SinglePathServer.Parser, new[]{ "PathName", "PathPointList", "Actions", "CopyPathName", "Offset", "FoldX", "FoldY", "FoldZ", "SpeedScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathGroupServer), global::GtMsg.PathGroupServer.Parser, new[]{ "PathList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.AIBulletPath), global::GtMsg.AIBulletPath.Parser, new[]{ "PathPointList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.AIBulletPathGroup), global::GtMsg.AIBulletPathGroup.Parser, new[]{ "PathList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.AIBulletPathSets), global::GtMsg.AIBulletPathSets.Parser, new[]{ "GroupList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathFileHead), global::GtMsg.PathFileHead.Parser, new[]{ "Count", "PathPosInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PathPosInfo), global::GtMsg.PathPosInfo.Parser, new[]{ "PathName", "StartPos", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.MessageTimer), global::GtMsg.MessageTimer.Parser, new[]{ "PassFrame", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ProductItemContent), global::GtMsg.ProductItemContent.Parser, new[]{ "ProductItemIndex", "Frame", "FishType", "CombinePaths", "Items", "EnterMessage", "LeaveMessage", "OnlyOne", "WaitUntilDone", "FastenOldFish", "FastenIn", "Toward", "Offset", "FoldX", "FoldY", "FoldZ", "SpeedScale", "Deep", "MessageList", "IsYuZhen", "RootMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ProductItem), global::GtMsg.ProductItem.Parser, new[]{ "ContentName", "IsSync", "Time", "ContentItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ProductItemGroup), global::GtMsg.ProductItemGroup.Parser, new[]{ "ItemList", "MainEnter", "AddFishEnter", "EnableAddFish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishProductNode), global::GtMsg.FishProductNode.Parser, new[]{ "ProductName", "RepeatTime", "FishType", "StartFrame", "Childs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishConfig), global::GtMsg.FishConfig.Parser, new[]{ "Type", "Name", "Raduis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishConfigList), global::GtMsg.FishConfigList.Parser, new[]{ "FishConfigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishData), global::GtMsg.FishData.Parser, new[]{ "FishName", "FishImportance", "FishModel", "FishScore", "FishDieEffect", "FishActionDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishActionData), global::GtMsg.FishActionData.Parser, new[]{ "ActionName", "ActionFrame", "IsIdle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishCollider), global::GtMsg.FishCollider.Parser, new[]{ "FishName", "ZBase", "Colliders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishColliderGroup), global::GtMsg.FishColliderGroup.Parser, new[]{ "ColliderList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BulletData), global::GtMsg.BulletData.Parser, new[]{ "ConfigID", "Model", "Speed", "Radius", "YuwangModel", "TurretModel", "Multiple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.MagicData), global::GtMsg.MagicData.Parser, new[]{ "ConfigID", "Model", "Multiple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.PropData), global::GtMsg.PropData.Parser, new[]{ "ConfigID", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BulletExtern), global::GtMsg.BulletExtern.Parser, new[]{ "TurretID", "TurretModel", "ConfigID", "BulletModel", "NetModel", "Multiple", "Speed", "Radius", "SoundIndex", "Paokou", "SkillModel", "Skillbg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BulletConfig), global::GtMsg.BulletConfig.Parser, new[]{ "BulletList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.InstantData), global::GtMsg.InstantData.Parser, new[]{ "ConfigID", "Multiple", "Speed", "Model", "Effect", "Discribe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FreezeData), global::GtMsg.FreezeData.Parser, new[]{ "Frame", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FastData), global::GtMsg.FastData.Parser, new[]{ "Frame", "Speed", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.JoinFreeRequestfish3d), global::GtMsg.JoinFreeRequestfish3d.Parser, new[]{ "UserId", "TableId", "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.JoinFreeResponsefish3d), global::GtMsg.JoinFreeResponsefish3d.Parser, new[]{ "NowFrame", "RootMessage", "ScoreRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.GameConfig), global::GtMsg.GameConfig.Parser, new[]{ "GunPos", "TurretPos", "FishConfigs", "PropConfigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.CurrentFrame), global::GtMsg.CurrentFrame.Parser, new[]{ "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishCoin), global::GtMsg.FishCoin.Parser, new[]{ "SeatId", "ScoreNow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.SceneFishs), global::GtMsg.SceneFishs.Parser, new[]{ "Fishs", "Freeze", "Fasts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.EstablishFishExternal), global::GtMsg.EstablishFishExternal.Parser, new[]{ "Fish", "OnlyOne", "WaitUntilDone", "RootMessage", "RedBagScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.EstablishFish), global::GtMsg.EstablishFish.Parser, new[]{ "FishId", "FishType", "PathName", "Frame", "Deep", "IsRedFish", "RandomNum", "FastenOldFish", "FastenIn", "Toward", "Offset", "FoldX", "FoldY", "FoldZ", "SpeedScale", "EnterMessage", "LeaveMessage", "MessageList", "IsRedBagFish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.CatchFish), global::GtMsg.CatchFish.Parser, new[]{ "SeatId", "FishId", "Frame", "FishScore", "LinkFishId", "ScoreNow", "DieType", "RedBagScore", "RedBagScoreAll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.EstablishBulletRequest), global::GtMsg.EstablishBulletRequest.Parser, new[]{ "Frame", "LockFishId", "Terminal", "BulletType", "BulletTurretID", "BulletConfigID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.CreateBullet), global::GtMsg.CreateBullet.Parser, new[]{ "SeatId", "Speed", "Frame", "Terminal", "LockFishId", "BulletType", "ScoreNow", "BulletTurretID", "BulletConfigID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FreezeFish), global::GtMsg.FreezeFish.Parser, new[]{ "Frame", "Duration", "FishList", "ShowEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FastEscape), global::GtMsg.FastEscape.Parser, new[]{ "Frame", "Speed", "Duration", "FishList", "ShowEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishAppearNotify), global::GtMsg.FishAppearNotify.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.CastSkillResponse), global::GtMsg.CastSkillResponse.Parser, new[]{ "SkillConfigID", "SeatId", "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.UsePropResponse), global::GtMsg.UsePropResponse.Parser, new[]{ "PropConfigID", "SeatId", "ResultCode", "Discribe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.NowAngerResponse), global::GtMsg.NowAngerResponse.Parser, new[]{ "AngerValue", "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BulletSpeedUp), global::GtMsg.BulletSpeedUp.Parser, new[]{ "Frame", "Duration", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ChangeBatteryByMyself), global::GtMsg.ChangeBatteryByMyself.Parser, new[]{ "BatteryIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ChangeBatteryByOhter), global::GtMsg.ChangeBatteryByOhter.Parser, new[]{ "SeatId", "BatteryIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ForceExitTableRequestfish3d), global::GtMsg.ForceExitTableRequestfish3d.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.ForceExitTableResponsefish3d), global::GtMsg.ForceExitTableResponsefish3d.Parser, new[]{ "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.NewTaskResponse), global::GtMsg.NewTaskResponse.Parser, new[]{ "TaskId", "FishType", "FishCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.TaskProgressResponse), global::GtMsg.TaskProgressResponse.Parser, new[]{ "TaskId", "FishCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.TaskFinishResponse), global::GtMsg.TaskFinishResponse.Parser, new[]{ "TaskId", "GetScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.TakeRedBagRequest), global::GtMsg.TakeRedBagRequest.Parser, new[]{ "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.TakeRedBagResponse), global::GtMsg.TakeRedBagResponse.Parser, new[]{ "ResultCode", "ResultMessage", "Ticket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.UpdateRedBag), global::GtMsg.UpdateRedBag.Parser, new[]{ "RedBagScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.UserTakeScoreRequest), global::GtMsg.UserTakeScoreRequest.Parser, new[]{ "Score", "PassWord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.UserTakeScoreRespone), global::GtMsg.UserTakeScoreRespone.Parser, new[]{ "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishInformationToAI), global::GtMsg.FishInformationToAI.Parser, new[]{ "Frame", "AreasScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.RedFishAppear), global::GtMsg.RedFishAppear.Parser, new[]{ "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.RedFishDisappear), global::GtMsg.RedFishDisappear.Parser, new[]{ "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BigFishAppear), global::GtMsg.BigFishAppear.Parser, new[]{ "FishId", "FishType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.BigFishDisappear), global::GtMsg.BigFishDisappear.Parser, new[]{ "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.AIHeartBeat), global::GtMsg.AIHeartBeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishTest), global::GtMsg.FishTest.Parser, new[]{ "FishId", "FishType", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GtMsg.FishGroupTest), global::GtMsg.FishGroupTest.Parser, new[]{ "FrameNow", "Group" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vec2 : pb::IMessage<Vec2> {
    private static readonly pb::MessageParser<Vec2> _parser = new pb::MessageParser<Vec2>(() => new Vec2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2(Vec2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2 Clone() {
      return new Vec2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderCircle : pb::IMessage<ColliderCircle> {
    private static readonly pb::MessageParser<ColliderCircle> _parser = new pb::MessageParser<ColliderCircle>(() => new ColliderCircle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColliderCircle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderCircle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderCircle(ColliderCircle other) : this() {
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderCircle Clone() {
      return new ColliderCircle(this);
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private global::GtMsg.Vec3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColliderCircle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColliderCircle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offset, other.Offset)) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColliderCircle other) {
      if (other == null) {
        return;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::GtMsg.Vec3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (offset_ == null) {
              offset_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quate : pb::IMessage<Quate> {
    private static readonly pb::MessageParser<Quate> _parser = new pb::MessageParser<Quate>(() => new Quate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quate(Quate other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quate Clone() {
      return new Quate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quate other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一个点
  /// </summary>
  public sealed partial class PathPointClient : pb::IMessage<PathPointClient> {
    private static readonly pb::MessageParser<PathPointClient> _parser = new pb::MessageParser<PathPointClient>(() => new PathPointClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPointClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointClient(PathPointClient other) : this() {
      Point = other.point_ != null ? other.Point.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointClient Clone() {
      return new PathPointClient(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::GtMsg.Vec3 point_;
    /// <summary>
    /// 点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPointClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPointClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPointClient other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::GtMsg.Vec3();
        }
        Point.MergeFrom(other.Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (point_ == null) {
              point_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一条路径
  /// </summary>
  public sealed partial class SinglePathClient : pb::IMessage<SinglePathClient> {
    private static readonly pb::MessageParser<SinglePathClient> _parser = new pb::MessageParser<SinglePathClient>(() => new SinglePathClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinglePathClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathClient(SinglePathClient other) : this() {
      pathName_ = other.pathName_;
      pathPointList_ = other.pathPointList_.Clone();
      actions_ = other.actions_.Clone();
      copyPathName_ = other.copyPathName_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
      foldX_ = other.foldX_;
      foldY_ = other.foldY_;
      foldZ_ = other.foldZ_;
      speedScale_ = other.speedScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathClient Clone() {
      return new SinglePathClient(this);
    }

    /// <summary>Field number for the "pathName" field.</summary>
    public const int PathNameFieldNumber = 1;
    private string pathName_ = "";
    /// <summary>
    /// 路径名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathPointList" field.</summary>
    public const int PathPointListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.PathPointClient> _repeated_pathPointList_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.PathPointClient.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.PathPointClient> pathPointList_ = new pbc::RepeatedField<global::GtMsg.PathPointClient>();
    /// <summary>
    /// 路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.PathPointClient> PathPointList {
      get { return pathPointList_; }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GtMsg.ActionData> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(26, global::GtMsg.ActionData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ActionData> actions_ = new pbc::RepeatedField<global::GtMsg.ActionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ActionData> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "copyPathName" field.</summary>
    public const int CopyPathNameFieldNumber = 4;
    private string copyPathName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CopyPathName {
      get { return copyPathName_; }
      set {
        copyPathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private global::GtMsg.Vec3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "foldX" field.</summary>
    public const int FoldXFieldNumber = 6;
    private bool foldX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldX {
      get { return foldX_; }
      set {
        foldX_ = value;
      }
    }

    /// <summary>Field number for the "foldY" field.</summary>
    public const int FoldYFieldNumber = 7;
    private bool foldY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldY {
      get { return foldY_; }
      set {
        foldY_ = value;
      }
    }

    /// <summary>Field number for the "foldZ" field.</summary>
    public const int FoldZFieldNumber = 8;
    private bool foldZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldZ {
      get { return foldZ_; }
      set {
        foldZ_ = value;
      }
    }

    /// <summary>Field number for the "speedScale" field.</summary>
    public const int SpeedScaleFieldNumber = 9;
    private float speedScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedScale {
      get { return speedScale_; }
      set {
        speedScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinglePathClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinglePathClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathName != other.PathName) return false;
      if(!pathPointList_.Equals(other.pathPointList_)) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if (CopyPathName != other.CopyPathName) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (FoldX != other.FoldX) return false;
      if (FoldY != other.FoldY) return false;
      if (FoldZ != other.FoldZ) return false;
      if (SpeedScale != other.SpeedScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      hash ^= pathPointList_.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (CopyPathName.Length != 0) hash ^= CopyPathName.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (FoldX != false) hash ^= FoldX.GetHashCode();
      if (FoldY != false) hash ^= FoldY.GetHashCode();
      if (FoldZ != false) hash ^= FoldZ.GetHashCode();
      if (SpeedScale != 0F) hash ^= SpeedScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PathName);
      }
      pathPointList_.WriteTo(output, _repeated_pathPointList_codec);
      actions_.WriteTo(output, _repeated_actions_codec);
      if (CopyPathName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CopyPathName);
      }
      if (offset_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Offset);
      }
      if (FoldX != false) {
        output.WriteRawTag(48);
        output.WriteBool(FoldX);
      }
      if (FoldY != false) {
        output.WriteRawTag(56);
        output.WriteBool(FoldY);
      }
      if (FoldZ != false) {
        output.WriteRawTag(64);
        output.WriteBool(FoldZ);
      }
      if (SpeedScale != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SpeedScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathName);
      }
      size += pathPointList_.CalculateSize(_repeated_pathPointList_codec);
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (CopyPathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CopyPathName);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (FoldX != false) {
        size += 1 + 1;
      }
      if (FoldY != false) {
        size += 1 + 1;
      }
      if (FoldZ != false) {
        size += 1 + 1;
      }
      if (SpeedScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinglePathClient other) {
      if (other == null) {
        return;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      pathPointList_.Add(other.pathPointList_);
      actions_.Add(other.actions_);
      if (other.CopyPathName.Length != 0) {
        CopyPathName = other.CopyPathName;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::GtMsg.Vec3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.FoldX != false) {
        FoldX = other.FoldX;
      }
      if (other.FoldY != false) {
        FoldY = other.FoldY;
      }
      if (other.FoldZ != false) {
        FoldZ = other.FoldZ;
      }
      if (other.SpeedScale != 0F) {
        SpeedScale = other.SpeedScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PathName = input.ReadString();
            break;
          }
          case 18: {
            pathPointList_.AddEntriesFrom(input, _repeated_pathPointList_codec);
            break;
          }
          case 26: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 34: {
            CopyPathName = input.ReadString();
            break;
          }
          case 42: {
            if (offset_ == null) {
              offset_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 48: {
            FoldX = input.ReadBool();
            break;
          }
          case 56: {
            FoldY = input.ReadBool();
            break;
          }
          case 64: {
            FoldZ = input.ReadBool();
            break;
          }
          case 77: {
            SpeedScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有路径
  /// </summary>
  public sealed partial class PathGroupClient : pb::IMessage<PathGroupClient> {
    private static readonly pb::MessageParser<PathGroupClient> _parser = new pb::MessageParser<PathGroupClient>(() => new PathGroupClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathGroupClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupClient(PathGroupClient other) : this() {
      pathList_ = other.pathList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupClient Clone() {
      return new PathGroupClient(this);
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.SinglePathClient> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.SinglePathClient.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.SinglePathClient> pathList_ = new pbc::RepeatedField<global::GtMsg.SinglePathClient>();
    /// <summary>
    /// 路径集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.SinglePathClient> PathList {
      get { return pathList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathGroupClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathGroupClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathList_.Equals(other.pathList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathList_.WriteTo(output, _repeated_pathList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathGroupClient other) {
      if (other == null) {
        return;
      }
      pathList_.Add(other.pathList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionData : pb::IMessage<ActionData> {
    private static readonly pb::MessageParser<ActionData> _parser = new pb::MessageParser<ActionData>(() => new ActionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData(ActionData other) : this() {
      actionFrame_ = other.actionFrame_;
      playIdleIndex_ = other.playIdleIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionData Clone() {
      return new ActionData(this);
    }

    /// <summary>Field number for the "actionFrame" field.</summary>
    public const int ActionFrameFieldNumber = 1;
    private int actionFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionFrame {
      get { return actionFrame_; }
      set {
        actionFrame_ = value;
      }
    }

    /// <summary>Field number for the "playIdleIndex" field.</summary>
    public const int PlayIdleIndexFieldNumber = 2;
    private int playIdleIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayIdleIndex {
      get { return playIdleIndex_; }
      set {
        playIdleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionFrame != other.ActionFrame) return false;
      if (PlayIdleIndex != other.PlayIdleIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionFrame != 0) hash ^= ActionFrame.GetHashCode();
      if (PlayIdleIndex != 0) hash ^= PlayIdleIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionFrame);
      }
      if (PlayIdleIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayIdleIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionFrame);
      }
      if (PlayIdleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayIdleIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionData other) {
      if (other == null) {
        return;
      }
      if (other.ActionFrame != 0) {
        ActionFrame = other.ActionFrame;
      }
      if (other.PlayIdleIndex != 0) {
        PlayIdleIndex = other.PlayIdleIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionFrame = input.ReadInt32();
            break;
          }
          case 16: {
            PlayIdleIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一个点
  /// </summary>
  public sealed partial class PathPointServer : pb::IMessage<PathPointServer> {
    private static readonly pb::MessageParser<PathPointServer> _parser = new pb::MessageParser<PathPointServer>(() => new PathPointServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPointServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointServer(PathPointServer other) : this() {
      Point = other.point_ != null ? other.Point.Clone() : null;
      NormalizedX = other.normalizedX_ != null ? other.NormalizedX.Clone() : null;
      NormalizedY = other.normalizedY_ != null ? other.NormalizedY.Clone() : null;
      NormalizedZ = other.normalizedZ_ != null ? other.NormalizedZ.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointServer Clone() {
      return new PathPointServer(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::GtMsg.Vec3 point_;
    /// <summary>
    /// 点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "normalizedX" field.</summary>
    public const int NormalizedXFieldNumber = 2;
    private global::GtMsg.Vec3 normalizedX_;
    /// <summary>
    /// x轴单位向量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 NormalizedX {
      get { return normalizedX_; }
      set {
        normalizedX_ = value;
      }
    }

    /// <summary>Field number for the "normalizedY" field.</summary>
    public const int NormalizedYFieldNumber = 3;
    private global::GtMsg.Vec3 normalizedY_;
    /// <summary>
    /// y轴单位向量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 NormalizedY {
      get { return normalizedY_; }
      set {
        normalizedY_ = value;
      }
    }

    /// <summary>Field number for the "normalizedZ" field.</summary>
    public const int NormalizedZFieldNumber = 4;
    private global::GtMsg.Vec3 normalizedZ_;
    /// <summary>
    /// z轴单位向量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 NormalizedZ {
      get { return normalizedZ_; }
      set {
        normalizedZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPointServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPointServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      if (!object.Equals(NormalizedX, other.NormalizedX)) return false;
      if (!object.Equals(NormalizedY, other.NormalizedY)) return false;
      if (!object.Equals(NormalizedZ, other.NormalizedZ)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      if (normalizedX_ != null) hash ^= NormalizedX.GetHashCode();
      if (normalizedY_ != null) hash ^= NormalizedY.GetHashCode();
      if (normalizedZ_ != null) hash ^= NormalizedZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if (normalizedX_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NormalizedX);
      }
      if (normalizedY_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NormalizedY);
      }
      if (normalizedZ_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NormalizedZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (normalizedX_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalizedX);
      }
      if (normalizedY_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalizedY);
      }
      if (normalizedZ_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalizedZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPointServer other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::GtMsg.Vec3();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.normalizedX_ != null) {
        if (normalizedX_ == null) {
          normalizedX_ = new global::GtMsg.Vec3();
        }
        NormalizedX.MergeFrom(other.NormalizedX);
      }
      if (other.normalizedY_ != null) {
        if (normalizedY_ == null) {
          normalizedY_ = new global::GtMsg.Vec3();
        }
        NormalizedY.MergeFrom(other.NormalizedY);
      }
      if (other.normalizedZ_ != null) {
        if (normalizedZ_ == null) {
          normalizedZ_ = new global::GtMsg.Vec3();
        }
        NormalizedZ.MergeFrom(other.NormalizedZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (point_ == null) {
              point_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(point_);
            break;
          }
          case 18: {
            if (normalizedX_ == null) {
              normalizedX_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(normalizedX_);
            break;
          }
          case 26: {
            if (normalizedY_ == null) {
              normalizedY_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(normalizedY_);
            break;
          }
          case 34: {
            if (normalizedZ_ == null) {
              normalizedZ_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(normalizedZ_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一条路径
  /// </summary>
  public sealed partial class SinglePathServer : pb::IMessage<SinglePathServer> {
    private static readonly pb::MessageParser<SinglePathServer> _parser = new pb::MessageParser<SinglePathServer>(() => new SinglePathServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinglePathServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathServer(SinglePathServer other) : this() {
      pathName_ = other.pathName_;
      pathPointList_ = other.pathPointList_.Clone();
      actions_ = other.actions_.Clone();
      copyPathName_ = other.copyPathName_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
      foldX_ = other.foldX_;
      foldY_ = other.foldY_;
      foldZ_ = other.foldZ_;
      speedScale_ = other.speedScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinglePathServer Clone() {
      return new SinglePathServer(this);
    }

    /// <summary>Field number for the "pathName" field.</summary>
    public const int PathNameFieldNumber = 1;
    private string pathName_ = "";
    /// <summary>
    /// 路径名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathPointList" field.</summary>
    public const int PathPointListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.PathPointServer> _repeated_pathPointList_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.PathPointServer.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.PathPointServer> pathPointList_ = new pbc::RepeatedField<global::GtMsg.PathPointServer>();
    /// <summary>
    /// 路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.PathPointServer> PathPointList {
      get { return pathPointList_; }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GtMsg.ActionData> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(26, global::GtMsg.ActionData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ActionData> actions_ = new pbc::RepeatedField<global::GtMsg.ActionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ActionData> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "copyPathName" field.</summary>
    public const int CopyPathNameFieldNumber = 4;
    private string copyPathName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CopyPathName {
      get { return copyPathName_; }
      set {
        copyPathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private global::GtMsg.Vec3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "foldX" field.</summary>
    public const int FoldXFieldNumber = 6;
    private bool foldX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldX {
      get { return foldX_; }
      set {
        foldX_ = value;
      }
    }

    /// <summary>Field number for the "foldY" field.</summary>
    public const int FoldYFieldNumber = 7;
    private bool foldY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldY {
      get { return foldY_; }
      set {
        foldY_ = value;
      }
    }

    /// <summary>Field number for the "foldZ" field.</summary>
    public const int FoldZFieldNumber = 8;
    private bool foldZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldZ {
      get { return foldZ_; }
      set {
        foldZ_ = value;
      }
    }

    /// <summary>Field number for the "speedScale" field.</summary>
    public const int SpeedScaleFieldNumber = 9;
    private float speedScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedScale {
      get { return speedScale_; }
      set {
        speedScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinglePathServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinglePathServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathName != other.PathName) return false;
      if(!pathPointList_.Equals(other.pathPointList_)) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if (CopyPathName != other.CopyPathName) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (FoldX != other.FoldX) return false;
      if (FoldY != other.FoldY) return false;
      if (FoldZ != other.FoldZ) return false;
      if (SpeedScale != other.SpeedScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      hash ^= pathPointList_.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (CopyPathName.Length != 0) hash ^= CopyPathName.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (FoldX != false) hash ^= FoldX.GetHashCode();
      if (FoldY != false) hash ^= FoldY.GetHashCode();
      if (FoldZ != false) hash ^= FoldZ.GetHashCode();
      if (SpeedScale != 0F) hash ^= SpeedScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PathName);
      }
      pathPointList_.WriteTo(output, _repeated_pathPointList_codec);
      actions_.WriteTo(output, _repeated_actions_codec);
      if (CopyPathName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CopyPathName);
      }
      if (offset_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Offset);
      }
      if (FoldX != false) {
        output.WriteRawTag(48);
        output.WriteBool(FoldX);
      }
      if (FoldY != false) {
        output.WriteRawTag(56);
        output.WriteBool(FoldY);
      }
      if (FoldZ != false) {
        output.WriteRawTag(64);
        output.WriteBool(FoldZ);
      }
      if (SpeedScale != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SpeedScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathName);
      }
      size += pathPointList_.CalculateSize(_repeated_pathPointList_codec);
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (CopyPathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CopyPathName);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (FoldX != false) {
        size += 1 + 1;
      }
      if (FoldY != false) {
        size += 1 + 1;
      }
      if (FoldZ != false) {
        size += 1 + 1;
      }
      if (SpeedScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinglePathServer other) {
      if (other == null) {
        return;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      pathPointList_.Add(other.pathPointList_);
      actions_.Add(other.actions_);
      if (other.CopyPathName.Length != 0) {
        CopyPathName = other.CopyPathName;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::GtMsg.Vec3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.FoldX != false) {
        FoldX = other.FoldX;
      }
      if (other.FoldY != false) {
        FoldY = other.FoldY;
      }
      if (other.FoldZ != false) {
        FoldZ = other.FoldZ;
      }
      if (other.SpeedScale != 0F) {
        SpeedScale = other.SpeedScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PathName = input.ReadString();
            break;
          }
          case 18: {
            pathPointList_.AddEntriesFrom(input, _repeated_pathPointList_codec);
            break;
          }
          case 26: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 34: {
            CopyPathName = input.ReadString();
            break;
          }
          case 42: {
            if (offset_ == null) {
              offset_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 48: {
            FoldX = input.ReadBool();
            break;
          }
          case 56: {
            FoldY = input.ReadBool();
            break;
          }
          case 64: {
            FoldZ = input.ReadBool();
            break;
          }
          case 77: {
            SpeedScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有路径
  /// </summary>
  public sealed partial class PathGroupServer : pb::IMessage<PathGroupServer> {
    private static readonly pb::MessageParser<PathGroupServer> _parser = new pb::MessageParser<PathGroupServer>(() => new PathGroupServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathGroupServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupServer(PathGroupServer other) : this() {
      pathList_ = other.pathList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathGroupServer Clone() {
      return new PathGroupServer(this);
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.SinglePathServer> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.SinglePathServer.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.SinglePathServer> pathList_ = new pbc::RepeatedField<global::GtMsg.SinglePathServer>();
    /// <summary>
    /// 路径集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.SinglePathServer> PathList {
      get { return pathList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathGroupServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathGroupServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathList_.Equals(other.pathList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathList_.WriteTo(output, _repeated_pathList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathGroupServer other) {
      if (other == null) {
        return;
      }
      pathList_.Add(other.pathList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ai子弹路径
  /// </summary>
  public sealed partial class AIBulletPath : pb::IMessage<AIBulletPath> {
    private static readonly pb::MessageParser<AIBulletPath> _parser = new pb::MessageParser<AIBulletPath>(() => new AIBulletPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIBulletPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPath(AIBulletPath other) : this() {
      pathPointList_ = other.pathPointList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPath Clone() {
      return new AIBulletPath(this);
    }

    /// <summary>Field number for the "pathPointList" field.</summary>
    public const int PathPointListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.Vec2> _repeated_pathPointList_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.Vec2.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.Vec2> pathPointList_ = new pbc::RepeatedField<global::GtMsg.Vec2>();
    /// <summary>
    ///  		string		pathName = 1;//路径名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.Vec2> PathPointList {
      get { return pathPointList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIBulletPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIBulletPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathPointList_.Equals(other.pathPointList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathPointList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathPointList_.WriteTo(output, _repeated_pathPointList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathPointList_.CalculateSize(_repeated_pathPointList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIBulletPath other) {
      if (other == null) {
        return;
      }
      pathPointList_.Add(other.pathPointList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            pathPointList_.AddEntriesFrom(input, _repeated_pathPointList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ai子弹路径组
  /// </summary>
  public sealed partial class AIBulletPathGroup : pb::IMessage<AIBulletPathGroup> {
    private static readonly pb::MessageParser<AIBulletPathGroup> _parser = new pb::MessageParser<AIBulletPathGroup>(() => new AIBulletPathGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIBulletPathGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathGroup(AIBulletPathGroup other) : this() {
      pathList_ = other.pathList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathGroup Clone() {
      return new AIBulletPathGroup(this);
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.AIBulletPath> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.AIBulletPath.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.AIBulletPath> pathList_ = new pbc::RepeatedField<global::GtMsg.AIBulletPath>();
    /// <summary>
    /// 		string groupName = 1;//组名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.AIBulletPath> PathList {
      get { return pathList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIBulletPathGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIBulletPathGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathList_.Equals(other.pathList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathList_.WriteTo(output, _repeated_pathList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIBulletPathGroup other) {
      if (other == null) {
        return;
      }
      pathList_.Add(other.pathList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ai子弹存储组的集合
  /// </summary>
  public sealed partial class AIBulletPathSets : pb::IMessage<AIBulletPathSets> {
    private static readonly pb::MessageParser<AIBulletPathSets> _parser = new pb::MessageParser<AIBulletPathSets>(() => new AIBulletPathSets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIBulletPathSets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathSets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathSets(AIBulletPathSets other) : this() {
      groupList_ = other.groupList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIBulletPathSets Clone() {
      return new AIBulletPathSets(this);
    }

    /// <summary>Field number for the "groupList" field.</summary>
    public const int GroupListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.AIBulletPathGroup> _repeated_groupList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.AIBulletPathGroup.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.AIBulletPathGroup> groupList_ = new pbc::RepeatedField<global::GtMsg.AIBulletPathGroup>();
    /// <summary>
    /// 组列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.AIBulletPathGroup> GroupList {
      get { return groupList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIBulletPathSets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIBulletPathSets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupList_.Equals(other.groupList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupList_.WriteTo(output, _repeated_groupList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupList_.CalculateSize(_repeated_groupList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIBulletPathSets other) {
      if (other == null) {
        return;
      }
      groupList_.Add(other.groupList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupList_.AddEntriesFrom(input, _repeated_groupList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 路径存储(客户端)头信息
  /// </summary>
  public sealed partial class PathFileHead : pb::IMessage<PathFileHead> {
    private static readonly pb::MessageParser<PathFileHead> _parser = new pb::MessageParser<PathFileHead>(() => new PathFileHead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathFileHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathFileHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathFileHead(PathFileHead other) : this() {
      count_ = other.count_;
      pathPosInfo_ = other.pathPosInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathFileHead Clone() {
      return new PathFileHead(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "pathPosInfo" field.</summary>
    public const int PathPosInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.PathPosInfo> _repeated_pathPosInfo_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.PathPosInfo.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.PathPosInfo> pathPosInfo_ = new pbc::RepeatedField<global::GtMsg.PathPosInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.PathPosInfo> PathPosInfo {
      get { return pathPosInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathFileHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathFileHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!pathPosInfo_.Equals(other.pathPosInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= pathPosInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      pathPosInfo_.WriteTo(output, _repeated_pathPosInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += pathPosInfo_.CalculateSize(_repeated_pathPosInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathFileHead other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      pathPosInfo_.Add(other.pathPosInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            pathPosInfo_.AddEntriesFrom(input, _repeated_pathPosInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 路径位置信息
  /// </summary>
  public sealed partial class PathPosInfo : pb::IMessage<PathPosInfo> {
    private static readonly pb::MessageParser<PathPosInfo> _parser = new pb::MessageParser<PathPosInfo>(() => new PathPosInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPosInfo(PathPosInfo other) : this() {
      pathName_ = other.pathName_;
      startPos_ = other.startPos_;
      length_ = other.length_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPosInfo Clone() {
      return new PathPosInfo(this);
    }

    /// <summary>Field number for the "pathName" field.</summary>
    public const int PathNameFieldNumber = 1;
    private string pathName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startPos" field.</summary>
    public const int StartPosFieldNumber = 2;
    private int startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathName != other.PathName) return false;
      if (StartPos != other.StartPos) return false;
      if (Length != other.Length) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      if (StartPos != 0) hash ^= StartPos.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PathName);
      }
      if (StartPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartPos);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Length);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathName);
      }
      if (StartPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPos);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPosInfo other) {
      if (other == null) {
        return;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      if (other.StartPos != 0) {
        StartPos = other.StartPos;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PathName = input.ReadString();
            break;
          }
          case 16: {
            StartPos = input.ReadInt32();
            break;
          }
          case 24: {
            Length = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageTimer : pb::IMessage<MessageTimer> {
    private static readonly pb::MessageParser<MessageTimer> _parser = new pb::MessageParser<MessageTimer>(() => new MessageTimer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageTimer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTimer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTimer(MessageTimer other) : this() {
      passFrame_ = other.passFrame_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTimer Clone() {
      return new MessageTimer(this);
    }

    /// <summary>Field number for the "passFrame" field.</summary>
    public const int PassFrameFieldNumber = 1;
    private int passFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassFrame {
      get { return passFrame_; }
      set {
        passFrame_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageTimer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageTimer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PassFrame != other.PassFrame) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PassFrame != 0) hash ^= PassFrame.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PassFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PassFrame);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PassFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassFrame);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageTimer other) {
      if (other == null) {
        return;
      }
      if (other.PassFrame != 0) {
        PassFrame = other.PassFrame;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PassFrame = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 包含的项
  /// </summary>
  public sealed partial class ProductItemContent : pb::IMessage<ProductItemContent> {
    private static readonly pb::MessageParser<ProductItemContent> _parser = new pb::MessageParser<ProductItemContent>(() => new ProductItemContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductItemContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemContent(ProductItemContent other) : this() {
      productItemIndex_ = other.productItemIndex_.Clone();
      frame_ = other.frame_;
      fishType_ = other.fishType_;
      combinePaths_ = other.combinePaths_;
      items_ = other.items_.Clone();
      enterMessage_ = other.enterMessage_;
      leaveMessage_ = other.leaveMessage_;
      onlyOne_ = other.onlyOne_;
      waitUntilDone_ = other.waitUntilDone_;
      fastenOldFish_ = other.fastenOldFish_;
      fastenIn_ = other.fastenIn_;
      toward_ = other.toward_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
      foldX_ = other.foldX_;
      foldY_ = other.foldY_;
      foldZ_ = other.foldZ_;
      speedScale_ = other.speedScale_;
      deep_ = other.deep_;
      messageList_ = other.messageList_.Clone();
      isYuZhen_ = other.isYuZhen_;
      rootMessage_ = other.rootMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemContent Clone() {
      return new ProductItemContent(this);
    }

    /// <summary>Field number for the "ProductItemIndex" field.</summary>
    public const int ProductItemIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_productItemIndex_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> productItemIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 单个项集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ProductItemIndex {
      get { return productItemIndex_; }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private int frame_;
    /// <summary>
    /// 起始帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 3;
    private string fishType_ = "";
    /// <summary>
    /// 鱼名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FishType {
      get { return fishType_; }
      set {
        fishType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CombinePaths" field.</summary>
    public const int CombinePathsFieldNumber = 4;
    private bool combinePaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CombinePaths {
      get { return combinePaths_; }
      set {
        combinePaths_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GtMsg.ProductItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::GtMsg.ProductItem.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ProductItem> items_ = new pbc::RepeatedField<global::GtMsg.ProductItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ProductItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "enterMessage" field.</summary>
    public const int EnterMessageFieldNumber = 6;
    private string enterMessage_ = "";
    /// <summary>
    /// 发送的通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterMessage {
      get { return enterMessage_; }
      set {
        enterMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaveMessage" field.</summary>
    public const int LeaveMessageFieldNumber = 7;
    private string leaveMessage_ = "";
    /// <summary>
    /// 发送的通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaveMessage {
      get { return leaveMessage_; }
      set {
        leaveMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlyOne" field.</summary>
    public const int OnlyOneFieldNumber = 8;
    private bool onlyOne_;
    /// <summary>
    /// 场上不能同时存在有该标志的路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyOne {
      get { return onlyOne_; }
      set {
        onlyOne_ = value;
      }
    }

    /// <summary>Field number for the "waitUntilDone" field.</summary>
    public const int WaitUntilDoneFieldNumber = 9;
    private bool waitUntilDone_;
    /// <summary>
    /// 等待直到该路径跑完
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WaitUntilDone {
      get { return waitUntilDone_; }
      set {
        waitUntilDone_ = value;
      }
    }

    /// <summary>Field number for the "fastenOldFish" field.</summary>
    public const int FastenOldFishFieldNumber = 10;
    private bool fastenOldFish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastenOldFish {
      get { return fastenOldFish_; }
      set {
        fastenOldFish_ = value;
      }
    }

    /// <summary>Field number for the "fastenIn" field.</summary>
    public const int FastenInFieldNumber = 11;
    private bool fastenIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastenIn {
      get { return fastenIn_; }
      set {
        fastenIn_ = value;
      }
    }

    /// <summary>Field number for the "toward" field.</summary>
    public const int TowardFieldNumber = 12;
    private int toward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toward {
      get { return toward_; }
      set {
        toward_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 13;
    private global::GtMsg.Vec3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "foldX" field.</summary>
    public const int FoldXFieldNumber = 14;
    private bool foldX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldX {
      get { return foldX_; }
      set {
        foldX_ = value;
      }
    }

    /// <summary>Field number for the "foldY" field.</summary>
    public const int FoldYFieldNumber = 15;
    private bool foldY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldY {
      get { return foldY_; }
      set {
        foldY_ = value;
      }
    }

    /// <summary>Field number for the "foldZ" field.</summary>
    public const int FoldZFieldNumber = 16;
    private bool foldZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldZ {
      get { return foldZ_; }
      set {
        foldZ_ = value;
      }
    }

    /// <summary>Field number for the "speedScale" field.</summary>
    public const int SpeedScaleFieldNumber = 17;
    private float speedScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedScale {
      get { return speedScale_; }
      set {
        speedScale_ = value;
      }
    }

    /// <summary>Field number for the "deep" field.</summary>
    public const int DeepFieldNumber = 18;
    private int deep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deep {
      get { return deep_; }
      set {
        deep_ = value;
      }
    }

    /// <summary>Field number for the "messageList" field.</summary>
    public const int MessageListFieldNumber = 19;
    private static readonly pb::FieldCodec<global::GtMsg.MessageTimer> _repeated_messageList_codec
        = pb::FieldCodec.ForMessage(154, global::GtMsg.MessageTimer.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.MessageTimer> messageList_ = new pbc::RepeatedField<global::GtMsg.MessageTimer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.MessageTimer> MessageList {
      get { return messageList_; }
    }

    /// <summary>Field number for the "isYuZhen" field.</summary>
    public const int IsYuZhenFieldNumber = 20;
    private bool isYuZhen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYuZhen {
      get { return isYuZhen_; }
      set {
        isYuZhen_ = value;
      }
    }

    /// <summary>Field number for the "rootMessage" field.</summary>
    public const int RootMessageFieldNumber = 21;
    private string rootMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootMessage {
      get { return rootMessage_; }
      set {
        rootMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductItemContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductItemContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!productItemIndex_.Equals(other.productItemIndex_)) return false;
      if (Frame != other.Frame) return false;
      if (FishType != other.FishType) return false;
      if (CombinePaths != other.CombinePaths) return false;
      if(!items_.Equals(other.items_)) return false;
      if (EnterMessage != other.EnterMessage) return false;
      if (LeaveMessage != other.LeaveMessage) return false;
      if (OnlyOne != other.OnlyOne) return false;
      if (WaitUntilDone != other.WaitUntilDone) return false;
      if (FastenOldFish != other.FastenOldFish) return false;
      if (FastenIn != other.FastenIn) return false;
      if (Toward != other.Toward) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (FoldX != other.FoldX) return false;
      if (FoldY != other.FoldY) return false;
      if (FoldZ != other.FoldZ) return false;
      if (SpeedScale != other.SpeedScale) return false;
      if (Deep != other.Deep) return false;
      if(!messageList_.Equals(other.messageList_)) return false;
      if (IsYuZhen != other.IsYuZhen) return false;
      if (RootMessage != other.RootMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= productItemIndex_.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (FishType.Length != 0) hash ^= FishType.GetHashCode();
      if (CombinePaths != false) hash ^= CombinePaths.GetHashCode();
      hash ^= items_.GetHashCode();
      if (EnterMessage.Length != 0) hash ^= EnterMessage.GetHashCode();
      if (LeaveMessage.Length != 0) hash ^= LeaveMessage.GetHashCode();
      if (OnlyOne != false) hash ^= OnlyOne.GetHashCode();
      if (WaitUntilDone != false) hash ^= WaitUntilDone.GetHashCode();
      if (FastenOldFish != false) hash ^= FastenOldFish.GetHashCode();
      if (FastenIn != false) hash ^= FastenIn.GetHashCode();
      if (Toward != 0) hash ^= Toward.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (FoldX != false) hash ^= FoldX.GetHashCode();
      if (FoldY != false) hash ^= FoldY.GetHashCode();
      if (FoldZ != false) hash ^= FoldZ.GetHashCode();
      if (SpeedScale != 0F) hash ^= SpeedScale.GetHashCode();
      if (Deep != 0) hash ^= Deep.GetHashCode();
      hash ^= messageList_.GetHashCode();
      if (IsYuZhen != false) hash ^= IsYuZhen.GetHashCode();
      if (RootMessage.Length != 0) hash ^= RootMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      productItemIndex_.WriteTo(output, _repeated_productItemIndex_codec);
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frame);
      }
      if (FishType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FishType);
      }
      if (CombinePaths != false) {
        output.WriteRawTag(32);
        output.WriteBool(CombinePaths);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (EnterMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EnterMessage);
      }
      if (LeaveMessage.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LeaveMessage);
      }
      if (OnlyOne != false) {
        output.WriteRawTag(64);
        output.WriteBool(OnlyOne);
      }
      if (WaitUntilDone != false) {
        output.WriteRawTag(72);
        output.WriteBool(WaitUntilDone);
      }
      if (FastenOldFish != false) {
        output.WriteRawTag(80);
        output.WriteBool(FastenOldFish);
      }
      if (FastenIn != false) {
        output.WriteRawTag(88);
        output.WriteBool(FastenIn);
      }
      if (Toward != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Toward);
      }
      if (offset_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Offset);
      }
      if (FoldX != false) {
        output.WriteRawTag(112);
        output.WriteBool(FoldX);
      }
      if (FoldY != false) {
        output.WriteRawTag(120);
        output.WriteBool(FoldY);
      }
      if (FoldZ != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(FoldZ);
      }
      if (SpeedScale != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SpeedScale);
      }
      if (Deep != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Deep);
      }
      messageList_.WriteTo(output, _repeated_messageList_codec);
      if (IsYuZhen != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsYuZhen);
      }
      if (RootMessage.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(RootMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += productItemIndex_.CalculateSize(_repeated_productItemIndex_codec);
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (FishType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FishType);
      }
      if (CombinePaths != false) {
        size += 1 + 1;
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (EnterMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterMessage);
      }
      if (LeaveMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaveMessage);
      }
      if (OnlyOne != false) {
        size += 1 + 1;
      }
      if (WaitUntilDone != false) {
        size += 1 + 1;
      }
      if (FastenOldFish != false) {
        size += 1 + 1;
      }
      if (FastenIn != false) {
        size += 1 + 1;
      }
      if (Toward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toward);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (FoldX != false) {
        size += 1 + 1;
      }
      if (FoldY != false) {
        size += 1 + 1;
      }
      if (FoldZ != false) {
        size += 2 + 1;
      }
      if (SpeedScale != 0F) {
        size += 2 + 4;
      }
      if (Deep != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Deep);
      }
      size += messageList_.CalculateSize(_repeated_messageList_codec);
      if (IsYuZhen != false) {
        size += 2 + 1;
      }
      if (RootMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RootMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductItemContent other) {
      if (other == null) {
        return;
      }
      productItemIndex_.Add(other.productItemIndex_);
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.FishType.Length != 0) {
        FishType = other.FishType;
      }
      if (other.CombinePaths != false) {
        CombinePaths = other.CombinePaths;
      }
      items_.Add(other.items_);
      if (other.EnterMessage.Length != 0) {
        EnterMessage = other.EnterMessage;
      }
      if (other.LeaveMessage.Length != 0) {
        LeaveMessage = other.LeaveMessage;
      }
      if (other.OnlyOne != false) {
        OnlyOne = other.OnlyOne;
      }
      if (other.WaitUntilDone != false) {
        WaitUntilDone = other.WaitUntilDone;
      }
      if (other.FastenOldFish != false) {
        FastenOldFish = other.FastenOldFish;
      }
      if (other.FastenIn != false) {
        FastenIn = other.FastenIn;
      }
      if (other.Toward != 0) {
        Toward = other.Toward;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::GtMsg.Vec3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.FoldX != false) {
        FoldX = other.FoldX;
      }
      if (other.FoldY != false) {
        FoldY = other.FoldY;
      }
      if (other.FoldZ != false) {
        FoldZ = other.FoldZ;
      }
      if (other.SpeedScale != 0F) {
        SpeedScale = other.SpeedScale;
      }
      if (other.Deep != 0) {
        Deep = other.Deep;
      }
      messageList_.Add(other.messageList_);
      if (other.IsYuZhen != false) {
        IsYuZhen = other.IsYuZhen;
      }
      if (other.RootMessage.Length != 0) {
        RootMessage = other.RootMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            productItemIndex_.AddEntriesFrom(input, _repeated_productItemIndex_codec);
            break;
          }
          case 16: {
            Frame = input.ReadInt32();
            break;
          }
          case 26: {
            FishType = input.ReadString();
            break;
          }
          case 32: {
            CombinePaths = input.ReadBool();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 50: {
            EnterMessage = input.ReadString();
            break;
          }
          case 58: {
            LeaveMessage = input.ReadString();
            break;
          }
          case 64: {
            OnlyOne = input.ReadBool();
            break;
          }
          case 72: {
            WaitUntilDone = input.ReadBool();
            break;
          }
          case 80: {
            FastenOldFish = input.ReadBool();
            break;
          }
          case 88: {
            FastenIn = input.ReadBool();
            break;
          }
          case 96: {
            Toward = input.ReadInt32();
            break;
          }
          case 106: {
            if (offset_ == null) {
              offset_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 112: {
            FoldX = input.ReadBool();
            break;
          }
          case 120: {
            FoldY = input.ReadBool();
            break;
          }
          case 128: {
            FoldZ = input.ReadBool();
            break;
          }
          case 141: {
            SpeedScale = input.ReadFloat();
            break;
          }
          case 144: {
            Deep = input.ReadInt32();
            break;
          }
          case 154: {
            messageList_.AddEntriesFrom(input, _repeated_messageList_codec);
            break;
          }
          case 160: {
            IsYuZhen = input.ReadBool();
            break;
          }
          case 170: {
            RootMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 产鱼单个项
  /// </summary>
  public sealed partial class ProductItem : pb::IMessage<ProductItem> {
    private static readonly pb::MessageParser<ProductItem> _parser = new pb::MessageParser<ProductItem>(() => new ProductItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItem(ProductItem other) : this() {
      contentName_ = other.contentName_;
      isSync_ = other.isSync_;
      time_ = other.time_;
      contentItems_ = other.contentItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItem Clone() {
      return new ProductItem(this);
    }

    /// <summary>Field number for the "ContentName" field.</summary>
    public const int ContentNameFieldNumber = 1;
    private string contentName_ = "";
    /// <summary>
    /// 路径名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentName {
      get { return contentName_; }
      set {
        contentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSync" field.</summary>
    public const int IsSyncFieldNumber = 2;
    private bool isSync_;
    /// <summary>
    /// 是否异步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSync {
      get { return isSync_; }
      set {
        isSync_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private int time_;
    /// <summary>
    /// 循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "contentItems" field.</summary>
    public const int ContentItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GtMsg.ProductItemContent> _repeated_contentItems_codec
        = pb::FieldCodec.ForMessage(34, global::GtMsg.ProductItemContent.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ProductItemContent> contentItems_ = new pbc::RepeatedField<global::GtMsg.ProductItemContent>();
    /// <summary>
    /// 包含的项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ProductItemContent> ContentItems {
      get { return contentItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContentName != other.ContentName) return false;
      if (IsSync != other.IsSync) return false;
      if (Time != other.Time) return false;
      if(!contentItems_.Equals(other.contentItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContentName.Length != 0) hash ^= ContentName.GetHashCode();
      if (IsSync != false) hash ^= IsSync.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      hash ^= contentItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContentName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContentName);
      }
      if (IsSync != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSync);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      contentItems_.WriteTo(output, _repeated_contentItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentName);
      }
      if (IsSync != false) {
        size += 1 + 1;
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      size += contentItems_.CalculateSize(_repeated_contentItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductItem other) {
      if (other == null) {
        return;
      }
      if (other.ContentName.Length != 0) {
        ContentName = other.ContentName;
      }
      if (other.IsSync != false) {
        IsSync = other.IsSync;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      contentItems_.Add(other.contentItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContentName = input.ReadString();
            break;
          }
          case 16: {
            IsSync = input.ReadBool();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
          case 34: {
            contentItems_.AddEntriesFrom(input, _repeated_contentItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 产鱼主列表
  /// </summary>
  public sealed partial class ProductItemGroup : pb::IMessage<ProductItemGroup> {
    private static readonly pb::MessageParser<ProductItemGroup> _parser = new pb::MessageParser<ProductItemGroup>(() => new ProductItemGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductItemGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemGroup(ProductItemGroup other) : this() {
      itemList_ = other.itemList_.Clone();
      mainEnter_ = other.mainEnter_;
      addFishEnter_ = other.addFishEnter_;
      enableAddFish_ = other.enableAddFish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductItemGroup Clone() {
      return new ProductItemGroup(this);
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.ProductItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.ProductItem.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ProductItem> itemList_ = new pbc::RepeatedField<global::GtMsg.ProductItem>();
    /// <summary>
    /// 单个项集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ProductItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "mainEnter" field.</summary>
    public const int MainEnterFieldNumber = 2;
    private string mainEnter_ = "";
    /// <summary>
    /// 进入口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainEnter {
      get { return mainEnter_; }
      set {
        mainEnter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddFishEnter" field.</summary>
    public const int AddFishEnterFieldNumber = 3;
    private string addFishEnter_ = "";
    /// <summary>
    /// 补充鱼的入口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddFishEnter {
      get { return addFishEnter_; }
      set {
        addFishEnter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EnableAddFish" field.</summary>
    public const int EnableAddFishFieldNumber = 4;
    private bool enableAddFish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableAddFish {
      get { return enableAddFish_; }
      set {
        enableAddFish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductItemGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductItemGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemList_.Equals(other.itemList_)) return false;
      if (MainEnter != other.MainEnter) return false;
      if (AddFishEnter != other.AddFishEnter) return false;
      if (EnableAddFish != other.EnableAddFish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemList_.GetHashCode();
      if (MainEnter.Length != 0) hash ^= MainEnter.GetHashCode();
      if (AddFishEnter.Length != 0) hash ^= AddFishEnter.GetHashCode();
      if (EnableAddFish != false) hash ^= EnableAddFish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (MainEnter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MainEnter);
      }
      if (AddFishEnter.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AddFishEnter);
      }
      if (EnableAddFish != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableAddFish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (MainEnter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainEnter);
      }
      if (AddFishEnter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddFishEnter);
      }
      if (EnableAddFish != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductItemGroup other) {
      if (other == null) {
        return;
      }
      itemList_.Add(other.itemList_);
      if (other.MainEnter.Length != 0) {
        MainEnter = other.MainEnter;
      }
      if (other.AddFishEnter.Length != 0) {
        AddFishEnter = other.AddFishEnter;
      }
      if (other.EnableAddFish != false) {
        EnableAddFish = other.EnableAddFish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 18: {
            MainEnter = input.ReadString();
            break;
          }
          case 26: {
            AddFishEnter = input.ReadString();
            break;
          }
          case 32: {
            EnableAddFish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishProductNode : pb::IMessage<FishProductNode> {
    private static readonly pb::MessageParser<FishProductNode> _parser = new pb::MessageParser<FishProductNode>(() => new FishProductNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishProductNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishProductNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishProductNode(FishProductNode other) : this() {
      productName_ = other.productName_;
      repeatTime_ = other.repeatTime_;
      fishType_ = other.fishType_;
      startFrame_ = other.startFrame_;
      childs_ = other.childs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishProductNode Clone() {
      return new FishProductNode(this);
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 1;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repeatTime" field.</summary>
    public const int RepeatTimeFieldNumber = 2;
    private int repeatTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatTime {
      get { return repeatTime_; }
      set {
        repeatTime_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 3;
    private string fishType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FishType {
      get { return fishType_; }
      set {
        fishType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startFrame" field.</summary>
    public const int StartFrameFieldNumber = 4;
    private int startFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    /// <summary>Field number for the "childs" field.</summary>
    public const int ChildsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GtMsg.FishProductNode> _repeated_childs_codec
        = pb::FieldCodec.ForMessage(42, global::GtMsg.FishProductNode.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishProductNode> childs_ = new pbc::RepeatedField<global::GtMsg.FishProductNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishProductNode> Childs {
      get { return childs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishProductNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishProductNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductName != other.ProductName) return false;
      if (RepeatTime != other.RepeatTime) return false;
      if (FishType != other.FishType) return false;
      if (StartFrame != other.StartFrame) return false;
      if(!childs_.Equals(other.childs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (RepeatTime != 0) hash ^= RepeatTime.GetHashCode();
      if (FishType.Length != 0) hash ^= FishType.GetHashCode();
      if (StartFrame != 0) hash ^= StartFrame.GetHashCode();
      hash ^= childs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductName);
      }
      if (RepeatTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RepeatTime);
      }
      if (FishType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FishType);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StartFrame);
      }
      childs_.WriteTo(output, _repeated_childs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (RepeatTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatTime);
      }
      if (FishType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FishType);
      }
      if (StartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      size += childs_.CalculateSize(_repeated_childs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishProductNode other) {
      if (other == null) {
        return;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.RepeatTime != 0) {
        RepeatTime = other.RepeatTime;
      }
      if (other.FishType.Length != 0) {
        FishType = other.FishType;
      }
      if (other.StartFrame != 0) {
        StartFrame = other.StartFrame;
      }
      childs_.Add(other.childs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductName = input.ReadString();
            break;
          }
          case 16: {
            RepeatTime = input.ReadInt32();
            break;
          }
          case 26: {
            FishType = input.ReadString();
            break;
          }
          case 32: {
            StartFrame = input.ReadInt32();
            break;
          }
          case 42: {
            childs_.AddEntriesFrom(input, _repeated_childs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 鱼配置
  /// </summary>
  public sealed partial class FishConfig : pb::IMessage<FishConfig> {
    private static readonly pb::MessageParser<FishConfig> _parser = new pb::MessageParser<FishConfig>(() => new FishConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfig(FishConfig other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      raduis_ = other.raduis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfig Clone() {
      return new FishConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "raduis" field.</summary>
    public const int RaduisFieldNumber = 3;
    private float raduis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Raduis {
      get { return raduis_; }
      set {
        raduis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Raduis != other.Raduis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Raduis != 0F) hash ^= Raduis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Raduis != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Raduis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Raduis != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Raduis != 0F) {
        Raduis = other.Raduis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Raduis = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishConfigList : pb::IMessage<FishConfigList> {
    private static readonly pb::MessageParser<FishConfigList> _parser = new pb::MessageParser<FishConfigList>(() => new FishConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfigList(FishConfigList other) : this() {
      fishConfigs_ = other.fishConfigs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishConfigList Clone() {
      return new FishConfigList(this);
    }

    /// <summary>Field number for the "fishConfigs" field.</summary>
    public const int FishConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.FishConfig> _repeated_fishConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.FishConfig.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishConfig> fishConfigs_ = new pbc::RepeatedField<global::GtMsg.FishConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishConfig> FishConfigs {
      get { return fishConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishConfigs_.Equals(other.fishConfigs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishConfigs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fishConfigs_.WriteTo(output, _repeated_fishConfigs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishConfigs_.CalculateSize(_repeated_fishConfigs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishConfigList other) {
      if (other == null) {
        return;
      }
      fishConfigs_.Add(other.fishConfigs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fishConfigs_.AddEntriesFrom(input, _repeated_fishConfigs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishData : pb::IMessage<FishData> {
    private static readonly pb::MessageParser<FishData> _parser = new pb::MessageParser<FishData>(() => new FishData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishData(FishData other) : this() {
      fishName_ = other.fishName_;
      fishImportance_ = other.fishImportance_;
      fishModel_ = other.fishModel_;
      fishScore_ = other.fishScore_.Clone();
      fishDieEffect_ = other.fishDieEffect_.Clone();
      fishActionDataList_ = other.fishActionDataList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishData Clone() {
      return new FishData(this);
    }

    /// <summary>Field number for the "fishName" field.</summary>
    public const int FishNameFieldNumber = 1;
    private string fishName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FishName {
      get { return fishName_; }
      set {
        fishName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fishImportance" field.</summary>
    public const int FishImportanceFieldNumber = 2;
    private int fishImportance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishImportance {
      get { return fishImportance_; }
      set {
        fishImportance_ = value;
      }
    }

    /// <summary>Field number for the "fishModel" field.</summary>
    public const int FishModelFieldNumber = 3;
    private string fishModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FishModel {
      get { return fishModel_; }
      set {
        fishModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FishScore" field.</summary>
    public const int FishScoreFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fishScore_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fishScore_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FishScore {
      get { return fishScore_; }
    }

    /// <summary>Field number for the "fishDieEffect" field.</summary>
    public const int FishDieEffectFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_fishDieEffect_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> fishDieEffect_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FishDieEffect {
      get { return fishDieEffect_; }
    }

    /// <summary>Field number for the "fishActionDataList" field.</summary>
    public const int FishActionDataListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GtMsg.FishActionData> _repeated_fishActionDataList_codec
        = pb::FieldCodec.ForMessage(50, global::GtMsg.FishActionData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishActionData> fishActionDataList_ = new pbc::RepeatedField<global::GtMsg.FishActionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishActionData> FishActionDataList {
      get { return fishActionDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishName != other.FishName) return false;
      if (FishImportance != other.FishImportance) return false;
      if (FishModel != other.FishModel) return false;
      if(!fishScore_.Equals(other.fishScore_)) return false;
      if(!fishDieEffect_.Equals(other.fishDieEffect_)) return false;
      if(!fishActionDataList_.Equals(other.fishActionDataList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishName.Length != 0) hash ^= FishName.GetHashCode();
      if (FishImportance != 0) hash ^= FishImportance.GetHashCode();
      if (FishModel.Length != 0) hash ^= FishModel.GetHashCode();
      hash ^= fishScore_.GetHashCode();
      hash ^= fishDieEffect_.GetHashCode();
      hash ^= fishActionDataList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FishName);
      }
      if (FishImportance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishImportance);
      }
      if (FishModel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FishModel);
      }
      fishScore_.WriteTo(output, _repeated_fishScore_codec);
      fishDieEffect_.WriteTo(output, _repeated_fishDieEffect_codec);
      fishActionDataList_.WriteTo(output, _repeated_fishActionDataList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FishName);
      }
      if (FishImportance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishImportance);
      }
      if (FishModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FishModel);
      }
      size += fishScore_.CalculateSize(_repeated_fishScore_codec);
      size += fishDieEffect_.CalculateSize(_repeated_fishDieEffect_codec);
      size += fishActionDataList_.CalculateSize(_repeated_fishActionDataList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishData other) {
      if (other == null) {
        return;
      }
      if (other.FishName.Length != 0) {
        FishName = other.FishName;
      }
      if (other.FishImportance != 0) {
        FishImportance = other.FishImportance;
      }
      if (other.FishModel.Length != 0) {
        FishModel = other.FishModel;
      }
      fishScore_.Add(other.fishScore_);
      fishDieEffect_.Add(other.fishDieEffect_);
      fishActionDataList_.Add(other.fishActionDataList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FishName = input.ReadString();
            break;
          }
          case 16: {
            FishImportance = input.ReadInt32();
            break;
          }
          case 26: {
            FishModel = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            fishScore_.AddEntriesFrom(input, _repeated_fishScore_codec);
            break;
          }
          case 42: {
            fishDieEffect_.AddEntriesFrom(input, _repeated_fishDieEffect_codec);
            break;
          }
          case 50: {
            fishActionDataList_.AddEntriesFrom(input, _repeated_fishActionDataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishActionData : pb::IMessage<FishActionData> {
    private static readonly pb::MessageParser<FishActionData> _parser = new pb::MessageParser<FishActionData>(() => new FishActionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishActionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishActionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishActionData(FishActionData other) : this() {
      actionName_ = other.actionName_;
      actionFrame_ = other.actionFrame_;
      isIdle_ = other.isIdle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishActionData Clone() {
      return new FishActionData(this);
    }

    /// <summary>Field number for the "ActionName" field.</summary>
    public const int ActionNameFieldNumber = 1;
    private string actionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActionFrame" field.</summary>
    public const int ActionFrameFieldNumber = 2;
    private int actionFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionFrame {
      get { return actionFrame_; }
      set {
        actionFrame_ = value;
      }
    }

    /// <summary>Field number for the "IsIdle" field.</summary>
    public const int IsIdleFieldNumber = 3;
    private bool isIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdle {
      get { return isIdle_; }
      set {
        isIdle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishActionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishActionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionName != other.ActionName) return false;
      if (ActionFrame != other.ActionFrame) return false;
      if (IsIdle != other.IsIdle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (ActionFrame != 0) hash ^= ActionFrame.GetHashCode();
      if (IsIdle != false) hash ^= IsIdle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionName);
      }
      if (ActionFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionFrame);
      }
      if (IsIdle != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsIdle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (ActionFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionFrame);
      }
      if (IsIdle != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishActionData other) {
      if (other == null) {
        return;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.ActionFrame != 0) {
        ActionFrame = other.ActionFrame;
      }
      if (other.IsIdle != false) {
        IsIdle = other.IsIdle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActionName = input.ReadString();
            break;
          }
          case 16: {
            ActionFrame = input.ReadInt32();
            break;
          }
          case 24: {
            IsIdle = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishCollider : pb::IMessage<FishCollider> {
    private static readonly pb::MessageParser<FishCollider> _parser = new pb::MessageParser<FishCollider>(() => new FishCollider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCollider(FishCollider other) : this() {
      fishName_ = other.fishName_;
      zBase_ = other.zBase_;
      colliders_ = other.colliders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCollider Clone() {
      return new FishCollider(this);
    }

    /// <summary>Field number for the "fishName" field.</summary>
    public const int FishNameFieldNumber = 1;
    private string fishName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FishName {
      get { return fishName_; }
      set {
        fishName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zBase" field.</summary>
    public const int ZBaseFieldNumber = 2;
    private int zBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZBase {
      get { return zBase_; }
      set {
        zBase_ = value;
      }
    }

    /// <summary>Field number for the "colliders" field.</summary>
    public const int CollidersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GtMsg.ColliderCircle> _repeated_colliders_codec
        = pb::FieldCodec.ForMessage(26, global::GtMsg.ColliderCircle.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.ColliderCircle> colliders_ = new pbc::RepeatedField<global::GtMsg.ColliderCircle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.ColliderCircle> Colliders {
      get { return colliders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishName != other.FishName) return false;
      if (ZBase != other.ZBase) return false;
      if(!colliders_.Equals(other.colliders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishName.Length != 0) hash ^= FishName.GetHashCode();
      if (ZBase != 0) hash ^= ZBase.GetHashCode();
      hash ^= colliders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FishName);
      }
      if (ZBase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ZBase);
      }
      colliders_.WriteTo(output, _repeated_colliders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FishName);
      }
      if (ZBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZBase);
      }
      size += colliders_.CalculateSize(_repeated_colliders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishCollider other) {
      if (other == null) {
        return;
      }
      if (other.FishName.Length != 0) {
        FishName = other.FishName;
      }
      if (other.ZBase != 0) {
        ZBase = other.ZBase;
      }
      colliders_.Add(other.colliders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FishName = input.ReadString();
            break;
          }
          case 16: {
            ZBase = input.ReadInt32();
            break;
          }
          case 26: {
            colliders_.AddEntriesFrom(input, _repeated_colliders_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishColliderGroup : pb::IMessage<FishColliderGroup> {
    private static readonly pb::MessageParser<FishColliderGroup> _parser = new pb::MessageParser<FishColliderGroup>(() => new FishColliderGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishColliderGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishColliderGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishColliderGroup(FishColliderGroup other) : this() {
      colliderList_ = other.colliderList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishColliderGroup Clone() {
      return new FishColliderGroup(this);
    }

    /// <summary>Field number for the "colliderList" field.</summary>
    public const int ColliderListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.FishCollider> _repeated_colliderList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.FishCollider.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishCollider> colliderList_ = new pbc::RepeatedField<global::GtMsg.FishCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishCollider> ColliderList {
      get { return colliderList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishColliderGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishColliderGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!colliderList_.Equals(other.colliderList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= colliderList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      colliderList_.WriteTo(output, _repeated_colliderList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += colliderList_.CalculateSize(_repeated_colliderList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishColliderGroup other) {
      if (other == null) {
        return;
      }
      colliderList_.Add(other.colliderList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            colliderList_.AddEntriesFrom(input, _repeated_colliderList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletData : pb::IMessage<BulletData> {
    private static readonly pb::MessageParser<BulletData> _parser = new pb::MessageParser<BulletData>(() => new BulletData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletData(BulletData other) : this() {
      configID_ = other.configID_;
      model_ = other.model_;
      speed_ = other.speed_;
      radius_ = other.radius_;
      yuwangModel_ = other.yuwangModel_;
      turretModel_ = other.turretModel_;
      multiple_ = other.multiple_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletData Clone() {
      return new BulletData(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "yuwangModel" field.</summary>
    public const int YuwangModelFieldNumber = 5;
    private string yuwangModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string YuwangModel {
      get { return yuwangModel_; }
      set {
        yuwangModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turretModel" field.</summary>
    public const int TurretModelFieldNumber = 6;
    private string turretModel_ = "";
    /// <summary>
    /// 炮台模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TurretModel {
      get { return turretModel_; }
      set {
        turretModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 7;
    private int multiple_;
    /// <summary>
    /// 子弹倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if (Model != other.Model) return false;
      if (Speed != other.Speed) return false;
      if (Radius != other.Radius) return false;
      if (YuwangModel != other.YuwangModel) return false;
      if (TurretModel != other.TurretModel) return false;
      if (Multiple != other.Multiple) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (YuwangModel.Length != 0) hash ^= YuwangModel.GetHashCode();
      if (TurretModel.Length != 0) hash ^= TurretModel.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Model);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (Radius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Radius);
      }
      if (YuwangModel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(YuwangModel);
      }
      if (TurretModel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TurretModel);
      }
      if (Multiple != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Multiple);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (YuwangModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YuwangModel);
      }
      if (TurretModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TurretModel);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletData other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.YuwangModel.Length != 0) {
        YuwangModel = other.YuwangModel;
      }
      if (other.TurretModel.Length != 0) {
        TurretModel = other.TurretModel;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 18: {
            Model = input.ReadString();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 37: {
            Radius = input.ReadFloat();
            break;
          }
          case 42: {
            YuwangModel = input.ReadString();
            break;
          }
          case 50: {
            TurretModel = input.ReadString();
            break;
          }
          case 56: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MagicData : pb::IMessage<MagicData> {
    private static readonly pb::MessageParser<MagicData> _parser = new pb::MessageParser<MagicData>(() => new MagicData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicData(MagicData other) : this() {
      configID_ = other.configID_;
      model_ = other.model_;
      multiple_ = other.multiple_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicData Clone() {
      return new MagicData(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 7;
    private int multiple_;
    /// <summary>
    /// 子弹倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if (Model != other.Model) return false;
      if (Multiple != other.Multiple) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Model);
      }
      if (Multiple != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Multiple);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicData other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 18: {
            Model = input.ReadString();
            break;
          }
          case 56: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropData : pb::IMessage<PropData> {
    private static readonly pb::MessageParser<PropData> _parser = new pb::MessageParser<PropData>(() => new PropData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData(PropData other) : this() {
      configID_ = other.configID_;
      price_ = other.price_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData Clone() {
      return new PropData(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private int price_;
    /// <summary>
    /// 道具价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if (Price != other.Price) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      if (Price != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropData other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 56: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletExtern : pb::IMessage<BulletExtern> {
    private static readonly pb::MessageParser<BulletExtern> _parser = new pb::MessageParser<BulletExtern>(() => new BulletExtern());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletExtern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletExtern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletExtern(BulletExtern other) : this() {
      turretID_ = other.turretID_;
      turretModel_ = other.turretModel_;
      configID_ = other.configID_;
      bulletModel_ = other.bulletModel_;
      netModel_ = other.netModel_;
      multiple_ = other.multiple_;
      speed_ = other.speed_;
      radius_ = other.radius_;
      soundIndex_ = other.soundIndex_;
      paokou_ = other.paokou_;
      skillModel_ = other.skillModel_;
      skillbg_ = other.skillbg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletExtern Clone() {
      return new BulletExtern(this);
    }

    /// <summary>Field number for the "TurretID" field.</summary>
    public const int TurretIDFieldNumber = 1;
    private int turretID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurretID {
      get { return turretID_; }
      set {
        turretID_ = value;
      }
    }

    /// <summary>Field number for the "TurretModel" field.</summary>
    public const int TurretModelFieldNumber = 2;
    private string turretModel_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TurretModel {
      get { return turretModel_; }
      set {
        turretModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConfigID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "BulletModel" field.</summary>
    public const int BulletModelFieldNumber = 4;
    private string bulletModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletModel {
      get { return bulletModel_; }
      set {
        bulletModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetModel" field.</summary>
    public const int NetModelFieldNumber = 5;
    private string netModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetModel {
      get { return netModel_; }
      set {
        netModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Multiple" field.</summary>
    public const int MultipleFieldNumber = 6;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 7;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 8;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "SoundIndex" field.</summary>
    public const int SoundIndexFieldNumber = 9;
    private int soundIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundIndex {
      get { return soundIndex_; }
      set {
        soundIndex_ = value;
      }
    }

    /// <summary>Field number for the "Paokou" field.</summary>
    public const int PaokouFieldNumber = 10;
    private string paokou_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Paokou {
      get { return paokou_; }
      set {
        paokou_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkillModel" field.</summary>
    public const int SkillModelFieldNumber = 11;
    private string skillModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillModel {
      get { return skillModel_; }
      set {
        skillModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skillbg" field.</summary>
    public const int SkillbgFieldNumber = 12;
    private string skillbg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Skillbg {
      get { return skillbg_; }
      set {
        skillbg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletExtern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletExtern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurretID != other.TurretID) return false;
      if (TurretModel != other.TurretModel) return false;
      if (ConfigID != other.ConfigID) return false;
      if (BulletModel != other.BulletModel) return false;
      if (NetModel != other.NetModel) return false;
      if (Multiple != other.Multiple) return false;
      if (Speed != other.Speed) return false;
      if (Radius != other.Radius) return false;
      if (SoundIndex != other.SoundIndex) return false;
      if (Paokou != other.Paokou) return false;
      if (SkillModel != other.SkillModel) return false;
      if (Skillbg != other.Skillbg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurretID != 0) hash ^= TurretID.GetHashCode();
      if (TurretModel.Length != 0) hash ^= TurretModel.GetHashCode();
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (BulletModel.Length != 0) hash ^= BulletModel.GetHashCode();
      if (NetModel.Length != 0) hash ^= NetModel.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (SoundIndex != 0) hash ^= SoundIndex.GetHashCode();
      if (Paokou.Length != 0) hash ^= Paokou.GetHashCode();
      if (SkillModel.Length != 0) hash ^= SkillModel.GetHashCode();
      if (Skillbg.Length != 0) hash ^= Skillbg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurretID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TurretID);
      }
      if (TurretModel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TurretModel);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigID);
      }
      if (BulletModel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BulletModel);
      }
      if (NetModel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NetModel);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (Speed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Speed);
      }
      if (Radius != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Radius);
      }
      if (SoundIndex != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SoundIndex);
      }
      if (Paokou.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Paokou);
      }
      if (SkillModel.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SkillModel);
      }
      if (Skillbg.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Skillbg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurretID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretID);
      }
      if (TurretModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TurretModel);
      }
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (BulletModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BulletModel);
      }
      if (NetModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetModel);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (SoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundIndex);
      }
      if (Paokou.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Paokou);
      }
      if (SkillModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillModel);
      }
      if (Skillbg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Skillbg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletExtern other) {
      if (other == null) {
        return;
      }
      if (other.TurretID != 0) {
        TurretID = other.TurretID;
      }
      if (other.TurretModel.Length != 0) {
        TurretModel = other.TurretModel;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.BulletModel.Length != 0) {
        BulletModel = other.BulletModel;
      }
      if (other.NetModel.Length != 0) {
        NetModel = other.NetModel;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.SoundIndex != 0) {
        SoundIndex = other.SoundIndex;
      }
      if (other.Paokou.Length != 0) {
        Paokou = other.Paokou;
      }
      if (other.SkillModel.Length != 0) {
        SkillModel = other.SkillModel;
      }
      if (other.Skillbg.Length != 0) {
        Skillbg = other.Skillbg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurretID = input.ReadInt32();
            break;
          }
          case 18: {
            TurretModel = input.ReadString();
            break;
          }
          case 24: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 34: {
            BulletModel = input.ReadString();
            break;
          }
          case 42: {
            NetModel = input.ReadString();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
          case 56: {
            Speed = input.ReadInt32();
            break;
          }
          case 69: {
            Radius = input.ReadFloat();
            break;
          }
          case 72: {
            SoundIndex = input.ReadInt32();
            break;
          }
          case 82: {
            Paokou = input.ReadString();
            break;
          }
          case 90: {
            SkillModel = input.ReadString();
            break;
          }
          case 98: {
            Skillbg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletConfig : pb::IMessage<BulletConfig> {
    private static readonly pb::MessageParser<BulletConfig> _parser = new pb::MessageParser<BulletConfig>(() => new BulletConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig(BulletConfig other) : this() {
      bulletList_ = other.bulletList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig Clone() {
      return new BulletConfig(this);
    }

    /// <summary>Field number for the "bulletList" field.</summary>
    public const int BulletListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.BulletExtern> _repeated_bulletList_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.BulletExtern.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.BulletExtern> bulletList_ = new pbc::RepeatedField<global::GtMsg.BulletExtern>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.BulletExtern> BulletList {
      get { return bulletList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bulletList_.Equals(other.bulletList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bulletList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bulletList_.WriteTo(output, _repeated_bulletList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bulletList_.CalculateSize(_repeated_bulletList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletConfig other) {
      if (other == null) {
        return;
      }
      bulletList_.Add(other.bulletList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bulletList_.AddEntriesFrom(input, _repeated_bulletList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstantData : pb::IMessage<InstantData> {
    private static readonly pb::MessageParser<InstantData> _parser = new pb::MessageParser<InstantData>(() => new InstantData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstantData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstantData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstantData(InstantData other) : this() {
      configID_ = other.configID_;
      multiple_ = other.multiple_;
      speed_ = other.speed_;
      model_ = other.model_;
      effect_ = other.effect_;
      discribe_ = other.discribe_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstantData Clone() {
      return new InstantData(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private int configID_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 2;
    private int multiple_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private string model_ = "";
    /// <summary>
    /// 特性文件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 5;
    private string effect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Effect {
      get { return effect_; }
      set {
        effect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discribe" field.</summary>
    public const int DiscribeFieldNumber = 6;
    private string discribe_ = "";
    /// <summary>
    /// 描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discribe {
      get { return discribe_; }
      set {
        discribe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstantData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstantData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if (Multiple != other.Multiple) return false;
      if (Speed != other.Speed) return false;
      if (Model != other.Model) return false;
      if (Effect != other.Effect) return false;
      if (Discribe != other.Discribe) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Effect.Length != 0) hash ^= Effect.GetHashCode();
      if (Discribe.Length != 0) hash ^= Discribe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Model);
      }
      if (Effect.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Effect);
      }
      if (Discribe.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Discribe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Effect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Effect);
      }
      if (Discribe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discribe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstantData other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Effect.Length != 0) {
        Effect = other.Effect;
      }
      if (other.Discribe.Length != 0) {
        Discribe = other.Discribe;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 34: {
            Model = input.ReadString();
            break;
          }
          case 42: {
            Effect = input.ReadString();
            break;
          }
          case 50: {
            Discribe = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FreezeData : pb::IMessage<FreezeData> {
    private static readonly pb::MessageParser<FreezeData> _parser = new pb::MessageParser<FreezeData>(() => new FreezeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreezeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeData(FreezeData other) : this() {
      frame_ = other.frame_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeData Clone() {
      return new FreezeData(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    /// <summary>
    /// 执行帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    /// <summary>
    /// 持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreezeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreezeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreezeData other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FastData : pb::IMessage<FastData> {
    private static readonly pb::MessageParser<FastData> _parser = new pb::MessageParser<FastData>(() => new FastData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FastData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastData(FastData other) : this() {
      frame_ = other.frame_;
      speed_ = other.speed_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastData Clone() {
      return new FastData(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FastData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FastData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Speed != other.Speed) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FastData other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5101.申请加入牌局
  /// </summary>
  public sealed partial class JoinFreeRequestfish3d : pb::IMessage<JoinFreeRequestfish3d> {
    private static readonly pb::MessageParser<JoinFreeRequestfish3d> _parser = new pb::MessageParser<JoinFreeRequestfish3d>(() => new JoinFreeRequestfish3d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinFreeRequestfish3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeRequestfish3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeRequestfish3d(JoinFreeRequestfish3d other) : this() {
      userId_ = other.userId_;
      tableId_ = other.tableId_;
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeRequestfish3d Clone() {
      return new JoinFreeRequestfish3d(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private int tableId_;
    /// <summary>
    /// 桌子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 3;
    private int seatId_;
    /// <summary>
    /// 椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinFreeRequestfish3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinFreeRequestfish3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TableId != other.TableId) return false;
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableId);
      }
      if (SeatId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinFreeRequestfish3d other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            TableId = input.ReadInt32();
            break;
          }
          case 24: {
            SeatId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5102.进入牌桌回复
  /// </summary>
  public sealed partial class JoinFreeResponsefish3d : pb::IMessage<JoinFreeResponsefish3d> {
    private static readonly pb::MessageParser<JoinFreeResponsefish3d> _parser = new pb::MessageParser<JoinFreeResponsefish3d>(() => new JoinFreeResponsefish3d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinFreeResponsefish3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeResponsefish3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeResponsefish3d(JoinFreeResponsefish3d other) : this() {
      nowFrame_ = other.nowFrame_;
      rootMessage_ = other.rootMessage_.Clone();
      scoreRatio_ = other.scoreRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinFreeResponsefish3d Clone() {
      return new JoinFreeResponsefish3d(this);
    }

    /// <summary>Field number for the "nowFrame" field.</summary>
    public const int NowFrameFieldNumber = 1;
    private int nowFrame_;
    /// <summary>
    /// 当前帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowFrame {
      get { return nowFrame_; }
      set {
        nowFrame_ = value;
      }
    }

    /// <summary>Field number for the "rootMessage" field.</summary>
    public const int RootMessageFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_rootMessage_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> rootMessage_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// bool isOverLook = 2;//是否为俯视图
    /// repeated int32 BulletMultipleList = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RootMessage {
      get { return rootMessage_; }
    }

    /// <summary>Field number for the "ScoreRatio" field.</summary>
    public const int ScoreRatioFieldNumber = 3;
    private int scoreRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreRatio {
      get { return scoreRatio_; }
      set {
        scoreRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinFreeResponsefish3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinFreeResponsefish3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NowFrame != other.NowFrame) return false;
      if(!rootMessage_.Equals(other.rootMessage_)) return false;
      if (ScoreRatio != other.ScoreRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NowFrame != 0) hash ^= NowFrame.GetHashCode();
      hash ^= rootMessage_.GetHashCode();
      if (ScoreRatio != 0) hash ^= ScoreRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NowFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NowFrame);
      }
      rootMessage_.WriteTo(output, _repeated_rootMessage_codec);
      if (ScoreRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScoreRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NowFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowFrame);
      }
      size += rootMessage_.CalculateSize(_repeated_rootMessage_codec);
      if (ScoreRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreRatio);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinFreeResponsefish3d other) {
      if (other == null) {
        return;
      }
      if (other.NowFrame != 0) {
        NowFrame = other.NowFrame;
      }
      rootMessage_.Add(other.rootMessage_);
      if (other.ScoreRatio != 0) {
        ScoreRatio = other.ScoreRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NowFrame = input.ReadInt32();
            break;
          }
          case 18: {
            rootMessage_.AddEntriesFrom(input, _repeated_rootMessage_codec);
            break;
          }
          case 24: {
            ScoreRatio = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5120
  /// </summary>
  public sealed partial class GameConfig : pb::IMessage<GameConfig> {
    private static readonly pb::MessageParser<GameConfig> _parser = new pb::MessageParser<GameConfig>(() => new GameConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig(GameConfig other) : this() {
      gunPos_ = other.gunPos_.Clone();
      turretPos_ = other.turretPos_.Clone();
      fishConfigs_ = other.fishConfigs_.Clone();
      propConfigs_ = other.propConfigs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig Clone() {
      return new GameConfig(this);
    }

    /// <summary>Field number for the "gunPos" field.</summary>
    public const int GunPosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GtMsg.Vec2> _repeated_gunPos_codec
        = pb::FieldCodec.ForMessage(10, global::GtMsg.Vec2.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.Vec2> gunPos_ = new pbc::RepeatedField<global::GtMsg.Vec2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.Vec2> GunPos {
      get { return gunPos_; }
    }

    /// <summary>Field number for the "turretPos" field.</summary>
    public const int TurretPosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.Vec2> _repeated_turretPos_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.Vec2.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.Vec2> turretPos_ = new pbc::RepeatedField<global::GtMsg.Vec2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.Vec2> TurretPos {
      get { return turretPos_; }
    }

    /// <summary>Field number for the "fishConfigs" field.</summary>
    public const int FishConfigsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GtMsg.FishData> _repeated_fishConfigs_codec
        = pb::FieldCodec.ForMessage(26, global::GtMsg.FishData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishData> fishConfigs_ = new pbc::RepeatedField<global::GtMsg.FishData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishData> FishConfigs {
      get { return fishConfigs_; }
    }

    /// <summary>Field number for the "propConfigs" field.</summary>
    public const int PropConfigsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GtMsg.PropData> _repeated_propConfigs_codec
        = pb::FieldCodec.ForMessage(50, global::GtMsg.PropData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.PropData> propConfigs_ = new pbc::RepeatedField<global::GtMsg.PropData>();
    /// <summary>
    /// repeated BulletData bulletConfigs = 4;
    /// repeated InstantData instantConfigs = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.PropData> PropConfigs {
      get { return propConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gunPos_.Equals(other.gunPos_)) return false;
      if(!turretPos_.Equals(other.turretPos_)) return false;
      if(!fishConfigs_.Equals(other.fishConfigs_)) return false;
      if(!propConfigs_.Equals(other.propConfigs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gunPos_.GetHashCode();
      hash ^= turretPos_.GetHashCode();
      hash ^= fishConfigs_.GetHashCode();
      hash ^= propConfigs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gunPos_.WriteTo(output, _repeated_gunPos_codec);
      turretPos_.WriteTo(output, _repeated_turretPos_codec);
      fishConfigs_.WriteTo(output, _repeated_fishConfigs_codec);
      propConfigs_.WriteTo(output, _repeated_propConfigs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gunPos_.CalculateSize(_repeated_gunPos_codec);
      size += turretPos_.CalculateSize(_repeated_turretPos_codec);
      size += fishConfigs_.CalculateSize(_repeated_fishConfigs_codec);
      size += propConfigs_.CalculateSize(_repeated_propConfigs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameConfig other) {
      if (other == null) {
        return;
      }
      gunPos_.Add(other.gunPos_);
      turretPos_.Add(other.turretPos_);
      fishConfigs_.Add(other.fishConfigs_);
      propConfigs_.Add(other.propConfigs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gunPos_.AddEntriesFrom(input, _repeated_gunPos_codec);
            break;
          }
          case 18: {
            turretPos_.AddEntriesFrom(input, _repeated_turretPos_codec);
            break;
          }
          case 26: {
            fishConfigs_.AddEntriesFrom(input, _repeated_fishConfigs_codec);
            break;
          }
          case 50: {
            propConfigs_.AddEntriesFrom(input, _repeated_propConfigs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5121.服务器当前帧数
  /// </summary>
  public sealed partial class CurrentFrame : pb::IMessage<CurrentFrame> {
    private static readonly pb::MessageParser<CurrentFrame> _parser = new pb::MessageParser<CurrentFrame>(() => new CurrentFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentFrame(CurrentFrame other) : this() {
      frame_ = other.frame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentFrame Clone() {
      return new CurrentFrame(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private float frame_;
    /// <summary>
    /// 当前帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0F) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentFrame other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0F) {
        Frame = other.Frame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Frame = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5122.用户鱼币
  /// </summary>
  public sealed partial class FishCoin : pb::IMessage<FishCoin> {
    private static readonly pb::MessageParser<FishCoin> _parser = new pb::MessageParser<FishCoin>(() => new FishCoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishCoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCoin(FishCoin other) : this() {
      seatId_ = other.seatId_;
      scoreNow_ = other.scoreNow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishCoin Clone() {
      return new FishCoin(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "scoreNow" field.</summary>
    public const int ScoreNowFieldNumber = 2;
    private long scoreNow_;
    /// <summary>
    /// 玩家当前分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScoreNow {
      get { return scoreNow_; }
      set {
        scoreNow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishCoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishCoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (ScoreNow != other.ScoreNow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (ScoreNow != 0L) hash ^= ScoreNow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (ScoreNow != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ScoreNow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (ScoreNow != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScoreNow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishCoin other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.ScoreNow != 0L) {
        ScoreNow = other.ScoreNow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            ScoreNow = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5123.场景鱼消息
  /// </summary>
  public sealed partial class SceneFishs : pb::IMessage<SceneFishs> {
    private static readonly pb::MessageParser<SceneFishs> _parser = new pb::MessageParser<SceneFishs>(() => new SceneFishs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneFishs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneFishs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneFishs(SceneFishs other) : this() {
      Fishs = other.fishs_ != null ? other.Fishs.Clone() : null;
      freeze_ = other.freeze_.Clone();
      fasts_ = other.fasts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneFishs Clone() {
      return new SceneFishs(this);
    }

    /// <summary>Field number for the "fishs" field.</summary>
    public const int FishsFieldNumber = 1;
    private global::GtMsg.EstablishFish fishs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.EstablishFish Fishs {
      get { return fishs_; }
      set {
        fishs_ = value;
      }
    }

    /// <summary>Field number for the "freeze" field.</summary>
    public const int FreezeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.FreezeData> _repeated_freeze_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.FreezeData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FreezeData> freeze_ = new pbc::RepeatedField<global::GtMsg.FreezeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FreezeData> Freeze {
      get { return freeze_; }
    }

    /// <summary>Field number for the "fasts" field.</summary>
    public const int FastsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GtMsg.FastData> _repeated_fasts_codec
        = pb::FieldCodec.ForMessage(26, global::GtMsg.FastData.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FastData> fasts_ = new pbc::RepeatedField<global::GtMsg.FastData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FastData> Fasts {
      get { return fasts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneFishs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneFishs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fishs, other.Fishs)) return false;
      if(!freeze_.Equals(other.freeze_)) return false;
      if(!fasts_.Equals(other.fasts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fishs_ != null) hash ^= Fishs.GetHashCode();
      hash ^= freeze_.GetHashCode();
      hash ^= fasts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fishs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fishs);
      }
      freeze_.WriteTo(output, _repeated_freeze_codec);
      fasts_.WriteTo(output, _repeated_fasts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fishs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fishs);
      }
      size += freeze_.CalculateSize(_repeated_freeze_codec);
      size += fasts_.CalculateSize(_repeated_fasts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneFishs other) {
      if (other == null) {
        return;
      }
      if (other.fishs_ != null) {
        if (fishs_ == null) {
          fishs_ = new global::GtMsg.EstablishFish();
        }
        Fishs.MergeFrom(other.Fishs);
      }
      freeze_.Add(other.freeze_);
      fasts_.Add(other.fasts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fishs_ == null) {
              fishs_ = new global::GtMsg.EstablishFish();
            }
            input.ReadMessage(fishs_);
            break;
          }
          case 18: {
            freeze_.AddEntriesFrom(input, _repeated_freeze_codec);
            break;
          }
          case 26: {
            fasts_.AddEntriesFrom(input, _repeated_fasts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EstablishFishExternal : pb::IMessage<EstablishFishExternal> {
    private static readonly pb::MessageParser<EstablishFishExternal> _parser = new pb::MessageParser<EstablishFishExternal>(() => new EstablishFishExternal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstablishFishExternal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFishExternal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFishExternal(EstablishFishExternal other) : this() {
      Fish = other.fish_ != null ? other.Fish.Clone() : null;
      onlyOne_ = other.onlyOne_;
      waitUntilDone_ = other.waitUntilDone_;
      rootMessage_ = other.rootMessage_;
      redBagScore_ = other.redBagScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFishExternal Clone() {
      return new EstablishFishExternal(this);
    }

    /// <summary>Field number for the "fish" field.</summary>
    public const int FishFieldNumber = 1;
    private global::GtMsg.EstablishFish fish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.EstablishFish Fish {
      get { return fish_; }
      set {
        fish_ = value;
      }
    }

    /// <summary>Field number for the "OnlyOne" field.</summary>
    public const int OnlyOneFieldNumber = 2;
    private bool onlyOne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyOne {
      get { return onlyOne_; }
      set {
        onlyOne_ = value;
      }
    }

    /// <summary>Field number for the "WaitUntilDone" field.</summary>
    public const int WaitUntilDoneFieldNumber = 3;
    private bool waitUntilDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WaitUntilDone {
      get { return waitUntilDone_; }
      set {
        waitUntilDone_ = value;
      }
    }

    /// <summary>Field number for the "RootMessage" field.</summary>
    public const int RootMessageFieldNumber = 4;
    private string rootMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootMessage {
      get { return rootMessage_; }
      set {
        rootMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RedBagScore" field.</summary>
    public const int RedBagScoreFieldNumber = 5;
    private int redBagScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedBagScore {
      get { return redBagScore_; }
      set {
        redBagScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstablishFishExternal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstablishFishExternal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fish, other.Fish)) return false;
      if (OnlyOne != other.OnlyOne) return false;
      if (WaitUntilDone != other.WaitUntilDone) return false;
      if (RootMessage != other.RootMessage) return false;
      if (RedBagScore != other.RedBagScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fish_ != null) hash ^= Fish.GetHashCode();
      if (OnlyOne != false) hash ^= OnlyOne.GetHashCode();
      if (WaitUntilDone != false) hash ^= WaitUntilDone.GetHashCode();
      if (RootMessage.Length != 0) hash ^= RootMessage.GetHashCode();
      if (RedBagScore != 0) hash ^= RedBagScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fish_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fish);
      }
      if (OnlyOne != false) {
        output.WriteRawTag(16);
        output.WriteBool(OnlyOne);
      }
      if (WaitUntilDone != false) {
        output.WriteRawTag(24);
        output.WriteBool(WaitUntilDone);
      }
      if (RootMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RootMessage);
      }
      if (RedBagScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RedBagScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fish);
      }
      if (OnlyOne != false) {
        size += 1 + 1;
      }
      if (WaitUntilDone != false) {
        size += 1 + 1;
      }
      if (RootMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootMessage);
      }
      if (RedBagScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedBagScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstablishFishExternal other) {
      if (other == null) {
        return;
      }
      if (other.fish_ != null) {
        if (fish_ == null) {
          fish_ = new global::GtMsg.EstablishFish();
        }
        Fish.MergeFrom(other.Fish);
      }
      if (other.OnlyOne != false) {
        OnlyOne = other.OnlyOne;
      }
      if (other.WaitUntilDone != false) {
        WaitUntilDone = other.WaitUntilDone;
      }
      if (other.RootMessage.Length != 0) {
        RootMessage = other.RootMessage;
      }
      if (other.RedBagScore != 0) {
        RedBagScore = other.RedBagScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fish_ == null) {
              fish_ = new global::GtMsg.EstablishFish();
            }
            input.ReadMessage(fish_);
            break;
          }
          case 16: {
            OnlyOne = input.ReadBool();
            break;
          }
          case 24: {
            WaitUntilDone = input.ReadBool();
            break;
          }
          case 34: {
            RootMessage = input.ReadString();
            break;
          }
          case 40: {
            RedBagScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5130.产生鱼的消息包
  /// </summary>
  public sealed partial class EstablishFish : pb::IMessage<EstablishFish> {
    private static readonly pb::MessageParser<EstablishFish> _parser = new pb::MessageParser<EstablishFish>(() => new EstablishFish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstablishFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFish(EstablishFish other) : this() {
      fishId_ = other.fishId_;
      fishType_ = other.fishType_;
      pathName_ = other.pathName_.Clone();
      frame_ = other.frame_;
      deep_ = other.deep_;
      isRedFish_ = other.isRedFish_;
      randomNum_ = other.randomNum_;
      fastenOldFish_ = other.fastenOldFish_;
      fastenIn_ = other.fastenIn_;
      toward_ = other.toward_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
      foldX_ = other.foldX_;
      foldY_ = other.foldY_;
      foldZ_ = other.foldZ_;
      speedScale_ = other.speedScale_;
      enterMessage_ = other.enterMessage_;
      leaveMessage_ = other.leaveMessage_;
      messageList_ = other.messageList_.Clone();
      isRedBagFish_ = other.isRedBagFish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishFish Clone() {
      return new EstablishFish(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    /// <summary>
    /// 鱼id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    /// <summary>
    /// 鱼类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    /// <summary>Field number for the "pathName" field.</summary>
    public const int PathNameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_pathName_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> pathName_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 鱼路径名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PathName {
      get { return pathName_; }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 4;
    private int frame_;
    /// <summary>
    /// 鱼的起始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "deep" field.</summary>
    public const int DeepFieldNumber = 5;
    private int deep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deep {
      get { return deep_; }
      set {
        deep_ = value;
      }
    }

    /// <summary>Field number for the "isRedFish" field.</summary>
    public const int IsRedFishFieldNumber = 6;
    private bool isRedFish_;
    /// <summary>
    /// 是否是红鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRedFish {
      get { return isRedFish_; }
      set {
        isRedFish_ = value;
      }
    }

    /// <summary>Field number for the "randomNum" field.</summary>
    public const int RandomNumFieldNumber = 7;
    private int randomNum_;
    /// <summary>
    /// 随机数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomNum {
      get { return randomNum_; }
      set {
        randomNum_ = value;
      }
    }

    /// <summary>Field number for the "FastenOldFish" field.</summary>
    public const int FastenOldFishFieldNumber = 8;
    private bool fastenOldFish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastenOldFish {
      get { return fastenOldFish_; }
      set {
        fastenOldFish_ = value;
      }
    }

    /// <summary>Field number for the "fastenIn" field.</summary>
    public const int FastenInFieldNumber = 9;
    private bool fastenIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastenIn {
      get { return fastenIn_; }
      set {
        fastenIn_ = value;
      }
    }

    /// <summary>Field number for the "toward" field.</summary>
    public const int TowardFieldNumber = 10;
    private int toward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toward {
      get { return toward_; }
      set {
        toward_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 11;
    private global::GtMsg.Vec3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "foldX" field.</summary>
    public const int FoldXFieldNumber = 12;
    private bool foldX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldX {
      get { return foldX_; }
      set {
        foldX_ = value;
      }
    }

    /// <summary>Field number for the "foldY" field.</summary>
    public const int FoldYFieldNumber = 13;
    private bool foldY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldY {
      get { return foldY_; }
      set {
        foldY_ = value;
      }
    }

    /// <summary>Field number for the "foldZ" field.</summary>
    public const int FoldZFieldNumber = 14;
    private bool foldZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoldZ {
      get { return foldZ_; }
      set {
        foldZ_ = value;
      }
    }

    /// <summary>Field number for the "speedScale" field.</summary>
    public const int SpeedScaleFieldNumber = 15;
    private float speedScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedScale {
      get { return speedScale_; }
      set {
        speedScale_ = value;
      }
    }

    /// <summary>Field number for the "EnterMessage" field.</summary>
    public const int EnterMessageFieldNumber = 16;
    private string enterMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterMessage {
      get { return enterMessage_; }
      set {
        enterMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeaveMessage" field.</summary>
    public const int LeaveMessageFieldNumber = 17;
    private string leaveMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaveMessage {
      get { return leaveMessage_; }
      set {
        leaveMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageList" field.</summary>
    public const int MessageListFieldNumber = 18;
    private static readonly pb::FieldCodec<global::GtMsg.MessageTimer> _repeated_messageList_codec
        = pb::FieldCodec.ForMessage(146, global::GtMsg.MessageTimer.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.MessageTimer> messageList_ = new pbc::RepeatedField<global::GtMsg.MessageTimer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.MessageTimer> MessageList {
      get { return messageList_; }
    }

    /// <summary>Field number for the "isRedBagFish" field.</summary>
    public const int IsRedBagFishFieldNumber = 19;
    private bool isRedBagFish_;
    /// <summary>
    /// 是否是红包鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRedBagFish {
      get { return isRedBagFish_; }
      set {
        isRedBagFish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstablishFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstablishFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (FishType != other.FishType) return false;
      if(!pathName_.Equals(other.pathName_)) return false;
      if (Frame != other.Frame) return false;
      if (Deep != other.Deep) return false;
      if (IsRedFish != other.IsRedFish) return false;
      if (RandomNum != other.RandomNum) return false;
      if (FastenOldFish != other.FastenOldFish) return false;
      if (FastenIn != other.FastenIn) return false;
      if (Toward != other.Toward) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (FoldX != other.FoldX) return false;
      if (FoldY != other.FoldY) return false;
      if (FoldZ != other.FoldZ) return false;
      if (SpeedScale != other.SpeedScale) return false;
      if (EnterMessage != other.EnterMessage) return false;
      if (LeaveMessage != other.LeaveMessage) return false;
      if(!messageList_.Equals(other.messageList_)) return false;
      if (IsRedBagFish != other.IsRedBagFish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      hash ^= pathName_.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Deep != 0) hash ^= Deep.GetHashCode();
      if (IsRedFish != false) hash ^= IsRedFish.GetHashCode();
      if (RandomNum != 0) hash ^= RandomNum.GetHashCode();
      if (FastenOldFish != false) hash ^= FastenOldFish.GetHashCode();
      if (FastenIn != false) hash ^= FastenIn.GetHashCode();
      if (Toward != 0) hash ^= Toward.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (FoldX != false) hash ^= FoldX.GetHashCode();
      if (FoldY != false) hash ^= FoldY.GetHashCode();
      if (FoldZ != false) hash ^= FoldZ.GetHashCode();
      if (SpeedScale != 0F) hash ^= SpeedScale.GetHashCode();
      if (EnterMessage.Length != 0) hash ^= EnterMessage.GetHashCode();
      if (LeaveMessage.Length != 0) hash ^= LeaveMessage.GetHashCode();
      hash ^= messageList_.GetHashCode();
      if (IsRedBagFish != false) hash ^= IsRedBagFish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      pathName_.WriteTo(output, _repeated_pathName_codec);
      if (Frame != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Frame);
      }
      if (Deep != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Deep);
      }
      if (IsRedFish != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRedFish);
      }
      if (RandomNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RandomNum);
      }
      if (FastenOldFish != false) {
        output.WriteRawTag(64);
        output.WriteBool(FastenOldFish);
      }
      if (FastenIn != false) {
        output.WriteRawTag(72);
        output.WriteBool(FastenIn);
      }
      if (Toward != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Toward);
      }
      if (offset_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Offset);
      }
      if (FoldX != false) {
        output.WriteRawTag(96);
        output.WriteBool(FoldX);
      }
      if (FoldY != false) {
        output.WriteRawTag(104);
        output.WriteBool(FoldY);
      }
      if (FoldZ != false) {
        output.WriteRawTag(112);
        output.WriteBool(FoldZ);
      }
      if (SpeedScale != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(SpeedScale);
      }
      if (EnterMessage.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(EnterMessage);
      }
      if (LeaveMessage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(LeaveMessage);
      }
      messageList_.WriteTo(output, _repeated_messageList_codec);
      if (IsRedBagFish != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsRedBagFish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      size += pathName_.CalculateSize(_repeated_pathName_codec);
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Deep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deep);
      }
      if (IsRedFish != false) {
        size += 1 + 1;
      }
      if (RandomNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomNum);
      }
      if (FastenOldFish != false) {
        size += 1 + 1;
      }
      if (FastenIn != false) {
        size += 1 + 1;
      }
      if (Toward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toward);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (FoldX != false) {
        size += 1 + 1;
      }
      if (FoldY != false) {
        size += 1 + 1;
      }
      if (FoldZ != false) {
        size += 1 + 1;
      }
      if (SpeedScale != 0F) {
        size += 1 + 4;
      }
      if (EnterMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EnterMessage);
      }
      if (LeaveMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LeaveMessage);
      }
      size += messageList_.CalculateSize(_repeated_messageList_codec);
      if (IsRedBagFish != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstablishFish other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
      pathName_.Add(other.pathName_);
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Deep != 0) {
        Deep = other.Deep;
      }
      if (other.IsRedFish != false) {
        IsRedFish = other.IsRedFish;
      }
      if (other.RandomNum != 0) {
        RandomNum = other.RandomNum;
      }
      if (other.FastenOldFish != false) {
        FastenOldFish = other.FastenOldFish;
      }
      if (other.FastenIn != false) {
        FastenIn = other.FastenIn;
      }
      if (other.Toward != 0) {
        Toward = other.Toward;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::GtMsg.Vec3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.FoldX != false) {
        FoldX = other.FoldX;
      }
      if (other.FoldY != false) {
        FoldY = other.FoldY;
      }
      if (other.FoldZ != false) {
        FoldZ = other.FoldZ;
      }
      if (other.SpeedScale != 0F) {
        SpeedScale = other.SpeedScale;
      }
      if (other.EnterMessage.Length != 0) {
        EnterMessage = other.EnterMessage;
      }
      if (other.LeaveMessage.Length != 0) {
        LeaveMessage = other.LeaveMessage;
      }
      messageList_.Add(other.messageList_);
      if (other.IsRedBagFish != false) {
        IsRedBagFish = other.IsRedBagFish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 26: {
            pathName_.AddEntriesFrom(input, _repeated_pathName_codec);
            break;
          }
          case 32: {
            Frame = input.ReadInt32();
            break;
          }
          case 40: {
            Deep = input.ReadInt32();
            break;
          }
          case 48: {
            IsRedFish = input.ReadBool();
            break;
          }
          case 56: {
            RandomNum = input.ReadInt32();
            break;
          }
          case 64: {
            FastenOldFish = input.ReadBool();
            break;
          }
          case 72: {
            FastenIn = input.ReadBool();
            break;
          }
          case 80: {
            Toward = input.ReadInt32();
            break;
          }
          case 90: {
            if (offset_ == null) {
              offset_ = new global::GtMsg.Vec3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 96: {
            FoldX = input.ReadBool();
            break;
          }
          case 104: {
            FoldY = input.ReadBool();
            break;
          }
          case 112: {
            FoldZ = input.ReadBool();
            break;
          }
          case 125: {
            SpeedScale = input.ReadFloat();
            break;
          }
          case 130: {
            EnterMessage = input.ReadString();
            break;
          }
          case 138: {
            LeaveMessage = input.ReadString();
            break;
          }
          case 146: {
            messageList_.AddEntriesFrom(input, _repeated_messageList_codec);
            break;
          }
          case 152: {
            IsRedBagFish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5131.捕获鱼
  /// </summary>
  public sealed partial class CatchFish : pb::IMessage<CatchFish> {
    private static readonly pb::MessageParser<CatchFish> _parser = new pb::MessageParser<CatchFish>(() => new CatchFish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatchFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchFish(CatchFish other) : this() {
      seatId_ = other.seatId_;
      fishId_ = other.fishId_;
      frame_ = other.frame_;
      fishScore_ = other.fishScore_;
      linkFishId_ = other.linkFishId_;
      scoreNow_ = other.scoreNow_;
      dieType_ = other.dieType_;
      redBagScore_ = other.redBagScore_;
      redBagScoreAll_ = other.redBagScoreAll_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchFish Clone() {
      return new CatchFish(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 2;
    private int fishId_;
    /// <summary>
    /// 鱼id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private int frame_;
    /// <summary>
    /// 鱼消亡帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "fish_score" field.</summary>
    public const int FishScoreFieldNumber = 4;
    private long fishScore_;
    /// <summary>
    /// 鱼分值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FishScore {
      get { return fishScore_; }
      set {
        fishScore_ = value;
      }
    }

    /// <summary>Field number for the "link_fish_id" field.</summary>
    public const int LinkFishIdFieldNumber = 5;
    private int linkFishId_;
    /// <summary>
    /// 连锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LinkFishId {
      get { return linkFishId_; }
      set {
        linkFishId_ = value;
      }
    }

    /// <summary>Field number for the "scoreNow" field.</summary>
    public const int ScoreNowFieldNumber = 6;
    private long scoreNow_;
    /// <summary>
    /// 玩家当前分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScoreNow {
      get { return scoreNow_; }
      set {
        scoreNow_ = value;
      }
    }

    /// <summary>Field number for the "dieType" field.</summary>
    public const int DieTypeFieldNumber = 7;
    private int dieType_;
    /// <summary>
    /// 死亡方式 0 正常被打死 1 爆炸而死 2 连锁而死 3食人鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DieType {
      get { return dieType_; }
      set {
        dieType_ = value;
      }
    }

    /// <summary>Field number for the "redBagScore" field.</summary>
    public const int RedBagScoreFieldNumber = 8;
    private int redBagScore_;
    /// <summary>
    /// 红包分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedBagScore {
      get { return redBagScore_; }
      set {
        redBagScore_ = value;
      }
    }

    /// <summary>Field number for the "redBagScoreAll" field.</summary>
    public const int RedBagScoreAllFieldNumber = 9;
    private int redBagScoreAll_;
    /// <summary>
    /// 红包总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedBagScoreAll {
      get { return redBagScoreAll_; }
      set {
        redBagScoreAll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatchFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatchFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (FishId != other.FishId) return false;
      if (Frame != other.Frame) return false;
      if (FishScore != other.FishScore) return false;
      if (LinkFishId != other.LinkFishId) return false;
      if (ScoreNow != other.ScoreNow) return false;
      if (DieType != other.DieType) return false;
      if (RedBagScore != other.RedBagScore) return false;
      if (RedBagScoreAll != other.RedBagScoreAll) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (FishScore != 0L) hash ^= FishScore.GetHashCode();
      if (LinkFishId != 0) hash ^= LinkFishId.GetHashCode();
      if (ScoreNow != 0L) hash ^= ScoreNow.GetHashCode();
      if (DieType != 0) hash ^= DieType.GetHashCode();
      if (RedBagScore != 0) hash ^= RedBagScore.GetHashCode();
      if (RedBagScoreAll != 0) hash ^= RedBagScoreAll.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (FishId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishId);
      }
      if (Frame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Frame);
      }
      if (FishScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FishScore);
      }
      if (LinkFishId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LinkFishId);
      }
      if (ScoreNow != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ScoreNow);
      }
      if (DieType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DieType);
      }
      if (RedBagScore != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RedBagScore);
      }
      if (RedBagScoreAll != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RedBagScoreAll);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (FishScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FishScore);
      }
      if (LinkFishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LinkFishId);
      }
      if (ScoreNow != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScoreNow);
      }
      if (DieType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DieType);
      }
      if (RedBagScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedBagScore);
      }
      if (RedBagScoreAll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedBagScoreAll);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatchFish other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.FishScore != 0L) {
        FishScore = other.FishScore;
      }
      if (other.LinkFishId != 0) {
        LinkFishId = other.LinkFishId;
      }
      if (other.ScoreNow != 0L) {
        ScoreNow = other.ScoreNow;
      }
      if (other.DieType != 0) {
        DieType = other.DieType;
      }
      if (other.RedBagScore != 0) {
        RedBagScore = other.RedBagScore;
      }
      if (other.RedBagScoreAll != 0) {
        RedBagScoreAll = other.RedBagScoreAll;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            FishId = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt32();
            break;
          }
          case 32: {
            FishScore = input.ReadInt64();
            break;
          }
          case 40: {
            LinkFishId = input.ReadInt32();
            break;
          }
          case 48: {
            ScoreNow = input.ReadInt64();
            break;
          }
          case 56: {
            DieType = input.ReadInt32();
            break;
          }
          case 64: {
            RedBagScore = input.ReadInt32();
            break;
          }
          case 72: {
            RedBagScoreAll = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5143.发射子弹请求
  /// </summary>
  public sealed partial class EstablishBulletRequest : pb::IMessage<EstablishBulletRequest> {
    private static readonly pb::MessageParser<EstablishBulletRequest> _parser = new pb::MessageParser<EstablishBulletRequest>(() => new EstablishBulletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstablishBulletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishBulletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishBulletRequest(EstablishBulletRequest other) : this() {
      frame_ = other.frame_;
      lockFishId_ = other.lockFishId_;
      Terminal = other.terminal_ != null ? other.Terminal.Clone() : null;
      bulletType_ = other.bulletType_;
      bulletTurretID_ = other.bulletTurretID_;
      bulletConfigID_ = other.bulletConfigID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstablishBulletRequest Clone() {
      return new EstablishBulletRequest(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    /// <summary>
    /// 子弹起始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "lockFishId" field.</summary>
    public const int LockFishIdFieldNumber = 2;
    private int lockFishId_;
    /// <summary>
    /// 锁定鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockFishId {
      get { return lockFishId_; }
      set {
        lockFishId_ = value;
      }
    }

    /// <summary>Field number for the "terminal" field.</summary>
    public const int TerminalFieldNumber = 3;
    private global::GtMsg.Vec2 terminal_;
    /// <summary>
    /// 目标位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec2 Terminal {
      get { return terminal_; }
      set {
        terminal_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 4;
    private int bulletType_;
    /// <summary>
    /// 类型 0 子弹 1 道具 2 技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "bulletTurretID" field.</summary>
    public const int BulletTurretIDFieldNumber = 5;
    private int bulletTurretID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTurretID {
      get { return bulletTurretID_; }
      set {
        bulletTurretID_ = value;
      }
    }

    /// <summary>Field number for the "bulletConfigID" field.</summary>
    public const int BulletConfigIDFieldNumber = 6;
    private int bulletConfigID_;
    /// <summary>
    /// 子弹配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletConfigID {
      get { return bulletConfigID_; }
      set {
        bulletConfigID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstablishBulletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstablishBulletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (LockFishId != other.LockFishId) return false;
      if (!object.Equals(Terminal, other.Terminal)) return false;
      if (BulletType != other.BulletType) return false;
      if (BulletTurretID != other.BulletTurretID) return false;
      if (BulletConfigID != other.BulletConfigID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (LockFishId != 0) hash ^= LockFishId.GetHashCode();
      if (terminal_ != null) hash ^= Terminal.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (BulletTurretID != 0) hash ^= BulletTurretID.GetHashCode();
      if (BulletConfigID != 0) hash ^= BulletConfigID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (LockFishId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LockFishId);
      }
      if (terminal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Terminal);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (BulletTurretID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTurretID);
      }
      if (BulletConfigID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletConfigID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (LockFishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockFishId);
      }
      if (terminal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Terminal);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (BulletTurretID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTurretID);
      }
      if (BulletConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletConfigID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstablishBulletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.LockFishId != 0) {
        LockFishId = other.LockFishId;
      }
      if (other.terminal_ != null) {
        if (terminal_ == null) {
          terminal_ = new global::GtMsg.Vec2();
        }
        Terminal.MergeFrom(other.Terminal);
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.BulletTurretID != 0) {
        BulletTurretID = other.BulletTurretID;
      }
      if (other.BulletConfigID != 0) {
        BulletConfigID = other.BulletConfigID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 16: {
            LockFishId = input.ReadInt32();
            break;
          }
          case 26: {
            if (terminal_ == null) {
              terminal_ = new global::GtMsg.Vec2();
            }
            input.ReadMessage(terminal_);
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTurretID = input.ReadInt32();
            break;
          }
          case 48: {
            BulletConfigID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5144.发射指弹回复
  /// </summary>
  public sealed partial class CreateBullet : pb::IMessage<CreateBullet> {
    private static readonly pb::MessageParser<CreateBullet> _parser = new pb::MessageParser<CreateBullet>(() => new CreateBullet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet(CreateBullet other) : this() {
      seatId_ = other.seatId_;
      speed_ = other.speed_;
      frame_ = other.frame_;
      Terminal = other.terminal_ != null ? other.Terminal.Clone() : null;
      lockFishId_ = other.lockFishId_;
      bulletType_ = other.bulletType_;
      scoreNow_ = other.scoreNow_;
      bulletTurretID_ = other.bulletTurretID_;
      bulletConfigID_ = other.bulletConfigID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet Clone() {
      return new CreateBullet(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 作为好
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private int frame_;
    /// <summary>
    ///  子弹起始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "terminal" field.</summary>
    public const int TerminalFieldNumber = 4;
    private global::GtMsg.Vec2 terminal_;
    /// <summary>
    /// 目标位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec2 Terminal {
      get { return terminal_; }
      set {
        terminal_ = value;
      }
    }

    /// <summary>Field number for the "lockFishId" field.</summary>
    public const int LockFishIdFieldNumber = 5;
    private int lockFishId_;
    /// <summary>
    /// 锁定鱼id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockFishId {
      get { return lockFishId_; }
      set {
        lockFishId_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 6;
    private int bulletType_;
    /// <summary>
    /// 类型 0 子弹 1 道具 2 技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "scoreNow" field.</summary>
    public const int ScoreNowFieldNumber = 7;
    private long scoreNow_;
    /// <summary>
    /// 玩家当前分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScoreNow {
      get { return scoreNow_; }
      set {
        scoreNow_ = value;
      }
    }

    /// <summary>Field number for the "bulletTurretID" field.</summary>
    public const int BulletTurretIDFieldNumber = 8;
    private int bulletTurretID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTurretID {
      get { return bulletTurretID_; }
      set {
        bulletTurretID_ = value;
      }
    }

    /// <summary>Field number for the "bulletConfigID" field.</summary>
    public const int BulletConfigIDFieldNumber = 9;
    private int bulletConfigID_;
    /// <summary>
    /// 子弹配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletConfigID {
      get { return bulletConfigID_; }
      set {
        bulletConfigID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Speed != other.Speed) return false;
      if (Frame != other.Frame) return false;
      if (!object.Equals(Terminal, other.Terminal)) return false;
      if (LockFishId != other.LockFishId) return false;
      if (BulletType != other.BulletType) return false;
      if (ScoreNow != other.ScoreNow) return false;
      if (BulletTurretID != other.BulletTurretID) return false;
      if (BulletConfigID != other.BulletConfigID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (terminal_ != null) hash ^= Terminal.GetHashCode();
      if (LockFishId != 0) hash ^= LockFishId.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (ScoreNow != 0L) hash ^= ScoreNow.GetHashCode();
      if (BulletTurretID != 0) hash ^= BulletTurretID.GetHashCode();
      if (BulletConfigID != 0) hash ^= BulletConfigID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Speed);
      }
      if (Frame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Frame);
      }
      if (terminal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Terminal);
      }
      if (LockFishId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LockFishId);
      }
      if (BulletType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletType);
      }
      if (ScoreNow != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ScoreNow);
      }
      if (BulletTurretID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BulletTurretID);
      }
      if (BulletConfigID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BulletConfigID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (terminal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Terminal);
      }
      if (LockFishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockFishId);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (ScoreNow != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScoreNow);
      }
      if (BulletTurretID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTurretID);
      }
      if (BulletConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletConfigID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBullet other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.terminal_ != null) {
        if (terminal_ == null) {
          terminal_ = new global::GtMsg.Vec2();
        }
        Terminal.MergeFrom(other.Terminal);
      }
      if (other.LockFishId != 0) {
        LockFishId = other.LockFishId;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.ScoreNow != 0L) {
        ScoreNow = other.ScoreNow;
      }
      if (other.BulletTurretID != 0) {
        BulletTurretID = other.BulletTurretID;
      }
      if (other.BulletConfigID != 0) {
        BulletConfigID = other.BulletConfigID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            Speed = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt32();
            break;
          }
          case 34: {
            if (terminal_ == null) {
              terminal_ = new global::GtMsg.Vec2();
            }
            input.ReadMessage(terminal_);
            break;
          }
          case 40: {
            LockFishId = input.ReadInt32();
            break;
          }
          case 48: {
            BulletType = input.ReadInt32();
            break;
          }
          case 56: {
            ScoreNow = input.ReadInt64();
            break;
          }
          case 64: {
            BulletTurretID = input.ReadInt32();
            break;
          }
          case 72: {
            BulletConfigID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5150.冰冻鱼（无用）
  /// </summary>
  public sealed partial class FreezeFish : pb::IMessage<FreezeFish> {
    private static readonly pb::MessageParser<FreezeFish> _parser = new pb::MessageParser<FreezeFish>(() => new FreezeFish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreezeFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeFish(FreezeFish other) : this() {
      frame_ = other.frame_;
      duration_ = other.duration_;
      fishList_ = other.fishList_.Clone();
      showEffect_ = other.showEffect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreezeFish Clone() {
      return new FreezeFish(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_fishList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> fishList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FishList {
      get { return fishList_; }
    }

    /// <summary>Field number for the "showEffect" field.</summary>
    public const int ShowEffectFieldNumber = 4;
    private bool showEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowEffect {
      get { return showEffect_; }
      set {
        showEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreezeFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreezeFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Duration != other.Duration) return false;
      if(!fishList_.Equals(other.fishList_)) return false;
      if (ShowEffect != other.ShowEffect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      hash ^= fishList_.GetHashCode();
      if (ShowEffect != false) hash ^= ShowEffect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (ShowEffect != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShowEffect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (ShowEffect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreezeFish other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      fishList_.Add(other.fishList_);
      if (other.ShowEffect != false) {
        ShowEffect = other.ShowEffect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
          case 32: {
            ShowEffect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5151.快速逃离
  /// </summary>
  public sealed partial class FastEscape : pb::IMessage<FastEscape> {
    private static readonly pb::MessageParser<FastEscape> _parser = new pb::MessageParser<FastEscape>(() => new FastEscape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FastEscape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastEscape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastEscape(FastEscape other) : this() {
      frame_ = other.frame_;
      speed_ = other.speed_;
      duration_ = other.duration_;
      fishList_ = other.fishList_.Clone();
      showEffect_ = other.showEffect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastEscape Clone() {
      return new FastEscape(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    /// <summary>
    /// 0表示正常速度， -1表示暂停， 1表示增加一倍速度， 2 表示增加2倍速度 。。。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fishList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fishList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FishList {
      get { return fishList_; }
    }

    /// <summary>Field number for the "showEffect" field.</summary>
    public const int ShowEffectFieldNumber = 5;
    private bool showEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowEffect {
      get { return showEffect_; }
      set {
        showEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FastEscape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FastEscape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Speed != other.Speed) return false;
      if (Duration != other.Duration) return false;
      if(!fishList_.Equals(other.fishList_)) return false;
      if (ShowEffect != other.ShowEffect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      hash ^= fishList_.GetHashCode();
      if (ShowEffect != false) hash ^= ShowEffect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (ShowEffect != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShowEffect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (ShowEffect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FastEscape other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      fishList_.Add(other.fishList_);
      if (other.ShowEffect != false) {
        ShowEffect = other.ShowEffect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
          case 40: {
            ShowEffect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5151.鱼阵提示
  /// </summary>
  public sealed partial class FishAppearNotify : pb::IMessage<FishAppearNotify> {
    private static readonly pb::MessageParser<FishAppearNotify> _parser = new pb::MessageParser<FishAppearNotify>(() => new FishAppearNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishAppearNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAppearNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAppearNotify(FishAppearNotify other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAppearNotify Clone() {
      return new FishAppearNotify(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishAppearNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishAppearNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishAppearNotify other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CastSkillResponse : pb::IMessage<CastSkillResponse> {
    private static readonly pb::MessageParser<CastSkillResponse> _parser = new pb::MessageParser<CastSkillResponse>(() => new CastSkillResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CastSkillResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CastSkillResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CastSkillResponse(CastSkillResponse other) : this() {
      skillConfigID_ = other.skillConfigID_;
      seatId_ = other.seatId_;
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CastSkillResponse Clone() {
      return new CastSkillResponse(this);
    }

    /// <summary>Field number for the "skillConfigID" field.</summary>
    public const int SkillConfigIDFieldNumber = 1;
    private int skillConfigID_;
    /// <summary>
    /// 技能配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillConfigID {
      get { return skillConfigID_; }
      set {
        skillConfigID_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 3;
    private int resultCode_;
    /// <summary>
    /// 0 成功 1 失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CastSkillResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CastSkillResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillConfigID != other.SkillConfigID) return false;
      if (SeatId != other.SeatId) return false;
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillConfigID != 0) hash ^= SkillConfigID.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillConfigID);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillConfigID);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CastSkillResponse other) {
      if (other == null) {
        return;
      }
      if (other.SkillConfigID != 0) {
        SkillConfigID = other.SkillConfigID;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillConfigID = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
          case 24: {
            ResultCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5153 使用道具回包
  /// </summary>
  public sealed partial class UsePropResponse : pb::IMessage<UsePropResponse> {
    private static readonly pb::MessageParser<UsePropResponse> _parser = new pb::MessageParser<UsePropResponse>(() => new UsePropResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePropResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropResponse(UsePropResponse other) : this() {
      propConfigID_ = other.propConfigID_;
      seatId_ = other.seatId_;
      resultCode_ = other.resultCode_;
      discribe_ = other.discribe_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropResponse Clone() {
      return new UsePropResponse(this);
    }

    /// <summary>Field number for the "propConfigID" field.</summary>
    public const int PropConfigIDFieldNumber = 1;
    private int propConfigID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropConfigID {
      get { return propConfigID_; }
      set {
        propConfigID_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 3;
    private int resultCode_;
    /// <summary>
    ///  0 成功 1 失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "discribe" field.</summary>
    public const int DiscribeFieldNumber = 4;
    private string discribe_ = "";
    /// <summary>
    /// 描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discribe {
      get { return discribe_; }
      set {
        discribe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePropResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePropResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropConfigID != other.PropConfigID) return false;
      if (SeatId != other.SeatId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (Discribe != other.Discribe) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropConfigID != 0) hash ^= PropConfigID.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (Discribe.Length != 0) hash ^= Discribe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropConfigID);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResultCode);
      }
      if (Discribe.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Discribe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropConfigID);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      if (Discribe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discribe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePropResponse other) {
      if (other == null) {
        return;
      }
      if (other.PropConfigID != 0) {
        PropConfigID = other.PropConfigID;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.Discribe.Length != 0) {
        Discribe = other.Discribe;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PropConfigID = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
          case 24: {
            ResultCode = input.ReadInt32();
            break;
          }
          case 34: {
            Discribe = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5154 玩家当前怒气
  /// </summary>
  public sealed partial class NowAngerResponse : pb::IMessage<NowAngerResponse> {
    private static readonly pb::MessageParser<NowAngerResponse> _parser = new pb::MessageParser<NowAngerResponse>(() => new NowAngerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NowAngerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NowAngerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NowAngerResponse(NowAngerResponse other) : this() {
      angerValue_ = other.angerValue_;
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NowAngerResponse Clone() {
      return new NowAngerResponse(this);
    }

    /// <summary>Field number for the "angerValue" field.</summary>
    public const int AngerValueFieldNumber = 1;
    private int angerValue_;
    /// <summary>
    /// 当前怒气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AngerValue {
      get { return angerValue_; }
      set {
        angerValue_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NowAngerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NowAngerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AngerValue != other.AngerValue) return false;
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AngerValue != 0) hash ^= AngerValue.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AngerValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AngerValue);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AngerValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngerValue);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NowAngerResponse other) {
      if (other == null) {
        return;
      }
      if (other.AngerValue != 0) {
        AngerValue = other.AngerValue;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AngerValue = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5155 子弹加速
  /// </summary>
  public sealed partial class BulletSpeedUp : pb::IMessage<BulletSpeedUp> {
    private static readonly pb::MessageParser<BulletSpeedUp> _parser = new pb::MessageParser<BulletSpeedUp>(() => new BulletSpeedUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletSpeedUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSpeedUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSpeedUp(BulletSpeedUp other) : this() {
      frame_ = other.frame_;
      duration_ = other.duration_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSpeedUp Clone() {
      return new BulletSpeedUp(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletSpeedUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletSpeedUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Duration != other.Duration) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (Scale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletSpeedUp other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 29: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 10026
  /// </summary>
  public sealed partial class ChangeBatteryByMyself : pb::IMessage<ChangeBatteryByMyself> {
    private static readonly pb::MessageParser<ChangeBatteryByMyself> _parser = new pb::MessageParser<ChangeBatteryByMyself>(() => new ChangeBatteryByMyself());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeBatteryByMyself> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByMyself() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByMyself(ChangeBatteryByMyself other) : this() {
      batteryIndex_ = other.batteryIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByMyself Clone() {
      return new ChangeBatteryByMyself(this);
    }

    /// <summary>Field number for the "batteryIndex" field.</summary>
    public const int BatteryIndexFieldNumber = 2;
    private int batteryIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatteryIndex {
      get { return batteryIndex_; }
      set {
        batteryIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeBatteryByMyself);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeBatteryByMyself other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatteryIndex != other.BatteryIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatteryIndex != 0) hash ^= BatteryIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatteryIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BatteryIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatteryIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatteryIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeBatteryByMyself other) {
      if (other == null) {
        return;
      }
      if (other.BatteryIndex != 0) {
        BatteryIndex = other.BatteryIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            BatteryIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 10027
  /// </summary>
  public sealed partial class ChangeBatteryByOhter : pb::IMessage<ChangeBatteryByOhter> {
    private static readonly pb::MessageParser<ChangeBatteryByOhter> _parser = new pb::MessageParser<ChangeBatteryByOhter>(() => new ChangeBatteryByOhter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeBatteryByOhter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByOhter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByOhter(ChangeBatteryByOhter other) : this() {
      seatId_ = other.seatId_;
      batteryIndex_ = other.batteryIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBatteryByOhter Clone() {
      return new ChangeBatteryByOhter(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "batteryIndex" field.</summary>
    public const int BatteryIndexFieldNumber = 2;
    private int batteryIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatteryIndex {
      get { return batteryIndex_; }
      set {
        batteryIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeBatteryByOhter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeBatteryByOhter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (BatteryIndex != other.BatteryIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (BatteryIndex != 0) hash ^= BatteryIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (BatteryIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BatteryIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (BatteryIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatteryIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeBatteryByOhter other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.BatteryIndex != 0) {
        BatteryIndex = other.BatteryIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            BatteryIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5160.退出请求
  /// </summary>
  public sealed partial class ForceExitTableRequestfish3d : pb::IMessage<ForceExitTableRequestfish3d> {
    private static readonly pb::MessageParser<ForceExitTableRequestfish3d> _parser = new pb::MessageParser<ForceExitTableRequestfish3d>(() => new ForceExitTableRequestfish3d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForceExitTableRequestfish3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableRequestfish3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableRequestfish3d(ForceExitTableRequestfish3d other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableRequestfish3d Clone() {
      return new ForceExitTableRequestfish3d(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForceExitTableRequestfish3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForceExitTableRequestfish3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForceExitTableRequestfish3d other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 5161.退出回复
  /// </summary>
  public sealed partial class ForceExitTableResponsefish3d : pb::IMessage<ForceExitTableResponsefish3d> {
    private static readonly pb::MessageParser<ForceExitTableResponsefish3d> _parser = new pb::MessageParser<ForceExitTableResponsefish3d>(() => new ForceExitTableResponsefish3d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForceExitTableResponsefish3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableResponsefish3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableResponsefish3d(ForceExitTableResponsefish3d other) : this() {
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceExitTableResponsefish3d Clone() {
      return new ForceExitTableResponsefish3d(this);
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private int resultCode_;
    /// <summary>
    /// 退出结果代号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForceExitTableResponsefish3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForceExitTableResponsefish3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForceExitTableResponsefish3d other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取新任务
  /// </summary>
  public sealed partial class NewTaskResponse : pb::IMessage<NewTaskResponse> {
    private static readonly pb::MessageParser<NewTaskResponse> _parser = new pb::MessageParser<NewTaskResponse>(() => new NewTaskResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewTaskResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTaskResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTaskResponse(NewTaskResponse other) : this() {
      taskId_ = other.taskId_;
      fishType_ = other.fishType_;
      fishCount_ = other.fishCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTaskResponse Clone() {
      return new NewTaskResponse(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    /// <summary>Field number for the "fishCount" field.</summary>
    public const int FishCountFieldNumber = 3;
    private int fishCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishCount {
      get { return fishCount_; }
      set {
        fishCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewTaskResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewTaskResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (FishType != other.FishType) return false;
      if (FishCount != other.FishCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      if (FishCount != 0) hash ^= FishCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      if (FishCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      if (FishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewTaskResponse other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
      if (other.FishCount != 0) {
        FishCount = other.FishCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 24: {
            FishCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 任务进度
  /// </summary>
  public sealed partial class TaskProgressResponse : pb::IMessage<TaskProgressResponse> {
    private static readonly pb::MessageParser<TaskProgressResponse> _parser = new pb::MessageParser<TaskProgressResponse>(() => new TaskProgressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskProgressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskProgressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskProgressResponse(TaskProgressResponse other) : this() {
      taskId_ = other.taskId_;
      fishCount_ = other.fishCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskProgressResponse Clone() {
      return new TaskProgressResponse(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "fishCount" field.</summary>
    public const int FishCountFieldNumber = 2;
    private int fishCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishCount {
      get { return fishCount_; }
      set {
        fishCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskProgressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskProgressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (FishCount != other.FishCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (FishCount != 0) hash ^= FishCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (FishCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (FishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskProgressResponse other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.FishCount != 0) {
        FishCount = other.FishCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            FishCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取奖励
  /// </summary>
  public sealed partial class TaskFinishResponse : pb::IMessage<TaskFinishResponse> {
    private static readonly pb::MessageParser<TaskFinishResponse> _parser = new pb::MessageParser<TaskFinishResponse>(() => new TaskFinishResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskFinishResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskFinishResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskFinishResponse(TaskFinishResponse other) : this() {
      taskId_ = other.taskId_;
      getScore_ = other.getScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskFinishResponse Clone() {
      return new TaskFinishResponse(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "getScore" field.</summary>
    public const int GetScoreFieldNumber = 2;
    private long getScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GetScore {
      get { return getScore_; }
      set {
        getScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskFinishResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskFinishResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (GetScore != other.GetScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (GetScore != 0L) hash ^= GetScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (GetScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GetScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (GetScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskFinishResponse other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.GetScore != 0L) {
        GetScore = other.GetScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            GetScore = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeRedBagRequest : pb::IMessage<TakeRedBagRequest> {
    private static readonly pb::MessageParser<TakeRedBagRequest> _parser = new pb::MessageParser<TakeRedBagRequest>(() => new TakeRedBagRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeRedBagRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagRequest(TakeRedBagRequest other) : this() {
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagRequest Clone() {
      return new TakeRedBagRequest(this);
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeRedBagRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeRedBagRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeRedBagRequest other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeRedBagResponse : pb::IMessage<TakeRedBagResponse> {
    private static readonly pb::MessageParser<TakeRedBagResponse> _parser = new pb::MessageParser<TakeRedBagResponse>(() => new TakeRedBagResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeRedBagResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagResponse(TakeRedBagResponse other) : this() {
      resultCode_ = other.resultCode_;
      resultMessage_ = other.resultMessage_;
      ticket_ = other.ticket_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRedBagResponse Clone() {
      return new TakeRedBagResponse(this);
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private int resultCode_;
    /// <summary>
    /// 结果代号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "resultMessage" field.</summary>
    public const int ResultMessageFieldNumber = 2;
    private string resultMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultMessage {
      get { return resultMessage_; }
      set {
        resultMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeRedBagResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeRedBagResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (ResultMessage != other.ResultMessage) return false;
      if (Ticket != other.Ticket) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ResultMessage.Length != 0) hash ^= ResultMessage.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResultCode);
      }
      if (ResultMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResultMessage);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      if (ResultMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultMessage);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeRedBagResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ResultMessage.Length != 0) {
        ResultMessage = other.ResultMessage;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadInt32();
            break;
          }
          case 18: {
            ResultMessage = input.ReadString();
            break;
          }
          case 26: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRedBag : pb::IMessage<UpdateRedBag> {
    private static readonly pb::MessageParser<UpdateRedBag> _parser = new pb::MessageParser<UpdateRedBag>(() => new UpdateRedBag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRedBag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRedBag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRedBag(UpdateRedBag other) : this() {
      redBagScore_ = other.redBagScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRedBag Clone() {
      return new UpdateRedBag(this);
    }

    /// <summary>Field number for the "RedBagScore" field.</summary>
    public const int RedBagScoreFieldNumber = 1;
    private int redBagScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedBagScore {
      get { return redBagScore_; }
      set {
        redBagScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRedBag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRedBag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedBagScore != other.RedBagScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedBagScore != 0) hash ^= RedBagScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedBagScore != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RedBagScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedBagScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedBagScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRedBag other) {
      if (other == null) {
        return;
      }
      if (other.RedBagScore != 0) {
        RedBagScore = other.RedBagScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedBagScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserTakeScoreRequest : pb::IMessage<UserTakeScoreRequest> {
    private static readonly pb::MessageParser<UserTakeScoreRequest> _parser = new pb::MessageParser<UserTakeScoreRequest>(() => new UserTakeScoreRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTakeScoreRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRequest(UserTakeScoreRequest other) : this() {
      score_ = other.score_;
      passWord_ = other.passWord_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRequest Clone() {
      return new UserTakeScoreRequest(this);
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "PassWord" field.</summary>
    public const int PassWordFieldNumber = 2;
    private string passWord_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTakeScoreRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTakeScoreRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (PassWord != other.PassWord) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Score);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PassWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTakeScoreRequest other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt64();
            break;
          }
          case 18: {
            PassWord = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserTakeScoreRespone : pb::IMessage<UserTakeScoreRespone> {
    private static readonly pb::MessageParser<UserTakeScoreRespone> _parser = new pb::MessageParser<UserTakeScoreRespone>(() => new UserTakeScoreRespone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTakeScoreRespone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRespone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRespone(UserTakeScoreRespone other) : this() {
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTakeScoreRespone Clone() {
      return new UserTakeScoreRespone(this);
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private int resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTakeScoreRespone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTakeScoreRespone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTakeScoreRespone other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// /////////////////////////////////////
  /// 机器人消息
  /// 5200.
  /// </summary>
  public sealed partial class FishInformationToAI : pb::IMessage<FishInformationToAI> {
    private static readonly pb::MessageParser<FishInformationToAI> _parser = new pb::MessageParser<FishInformationToAI>(() => new FishInformationToAI());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishInformationToAI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInformationToAI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInformationToAI(FishInformationToAI other) : this() {
      frame_ = other.frame_;
      areasScore_ = other.areasScore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInformationToAI Clone() {
      return new FishInformationToAI(this);
    }

    /// <summary>Field number for the "Frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "AreasScore" field.</summary>
    public const int AreasScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_areasScore_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> areasScore_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AreasScore {
      get { return areasScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishInformationToAI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishInformationToAI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if(!areasScore_.Equals(other.areasScore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      hash ^= areasScore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      areasScore_.WriteTo(output, _repeated_areasScore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      size += areasScore_.CalculateSize(_repeated_areasScore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishInformationToAI other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      areasScore_.Add(other.areasScore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            areasScore_.AddEntriesFrom(input, _repeated_areasScore_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5201
  /// </summary>
  public sealed partial class RedFishAppear : pb::IMessage<RedFishAppear> {
    private static readonly pb::MessageParser<RedFishAppear> _parser = new pb::MessageParser<RedFishAppear>(() => new RedFishAppear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedFishAppear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishAppear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishAppear(RedFishAppear other) : this() {
      fishId_ = other.fishId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishAppear Clone() {
      return new RedFishAppear(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedFishAppear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedFishAppear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedFishAppear other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5202
  /// </summary>
  public sealed partial class RedFishDisappear : pb::IMessage<RedFishDisappear> {
    private static readonly pb::MessageParser<RedFishDisappear> _parser = new pb::MessageParser<RedFishDisappear>(() => new RedFishDisappear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedFishDisappear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishDisappear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishDisappear(RedFishDisappear other) : this() {
      fishId_ = other.fishId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedFishDisappear Clone() {
      return new RedFishDisappear(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedFishDisappear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedFishDisappear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedFishDisappear other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5203
  /// </summary>
  public sealed partial class BigFishAppear : pb::IMessage<BigFishAppear> {
    private static readonly pb::MessageParser<BigFishAppear> _parser = new pb::MessageParser<BigFishAppear>(() => new BigFishAppear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigFishAppear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishAppear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishAppear(BigFishAppear other) : this() {
      fishId_ = other.fishId_;
      fishType_ = other.fishType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishAppear Clone() {
      return new BigFishAppear(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigFishAppear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigFishAppear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (FishType != other.FishType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigFishAppear other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5204
  /// </summary>
  public sealed partial class BigFishDisappear : pb::IMessage<BigFishDisappear> {
    private static readonly pb::MessageParser<BigFishDisappear> _parser = new pb::MessageParser<BigFishDisappear>(() => new BigFishDisappear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigFishDisappear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishDisappear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishDisappear(BigFishDisappear other) : this() {
      fishId_ = other.fishId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigFishDisappear Clone() {
      return new BigFishDisappear(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigFishDisappear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigFishDisappear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigFishDisappear other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5205
  /// </summary>
  public sealed partial class AIHeartBeat : pb::IMessage<AIHeartBeat> {
    private static readonly pb::MessageParser<AIHeartBeat> _parser = new pb::MessageParser<AIHeartBeat>(() => new AIHeartBeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIHeartBeat(AIHeartBeat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIHeartBeat Clone() {
      return new AIHeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIHeartBeat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 测试
  /// 5300
  /// </summary>
  public sealed partial class FishTest : pb::IMessage<FishTest> {
    private static readonly pb::MessageParser<FishTest> _parser = new pb::MessageParser<FishTest>(() => new FishTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTest(FishTest other) : this() {
      fishId_ = other.fishId_;
      fishType_ = other.fishType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTest Clone() {
      return new FishTest(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::GtMsg.Vec2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GtMsg.Vec2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (FishType != other.FishType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishTest other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::GtMsg.Vec2();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::GtMsg.Vec2();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 5301
  /// </summary>
  public sealed partial class FishGroupTest : pb::IMessage<FishGroupTest> {
    private static readonly pb::MessageParser<FishGroupTest> _parser = new pb::MessageParser<FishGroupTest>(() => new FishGroupTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishGroupTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GtMsg.GtBuyuReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishGroupTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishGroupTest(FishGroupTest other) : this() {
      frameNow_ = other.frameNow_;
      group_ = other.group_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishGroupTest Clone() {
      return new FishGroupTest(this);
    }

    /// <summary>Field number for the "frameNow" field.</summary>
    public const int FrameNowFieldNumber = 1;
    private int frameNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNow {
      get { return frameNow_; }
      set {
        frameNow_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GtMsg.FishTest> _repeated_group_codec
        = pb::FieldCodec.ForMessage(18, global::GtMsg.FishTest.Parser);
    private readonly pbc::RepeatedField<global::GtMsg.FishTest> group_ = new pbc::RepeatedField<global::GtMsg.FishTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GtMsg.FishTest> Group {
      get { return group_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishGroupTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishGroupTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNow != other.FrameNow) return false;
      if(!group_.Equals(other.group_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNow != 0) hash ^= FrameNow.GetHashCode();
      hash ^= group_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNow != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameNow);
      }
      group_.WriteTo(output, _repeated_group_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNow);
      }
      size += group_.CalculateSize(_repeated_group_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishGroupTest other) {
      if (other == null) {
        return;
      }
      if (other.FrameNow != 0) {
        FrameNow = other.FrameNow;
      }
      group_.Add(other.group_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameNow = input.ReadInt32();
            break;
          }
          case 18: {
            group_.AddEntriesFrom(input, _repeated_group_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
